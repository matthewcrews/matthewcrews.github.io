
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Categories on Matthew Crews</title>
        <link>https://matthewcrews.com/categories/</link>
        <description>Recent content in Categories on Matthew Crews</description>
        <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://matthewcrews.com/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Scheduling Jobs for Maximum Efficiency - Part 1</title>
<link>https://matthewcrews.com/blog/2021/01/2021-01-25/</link>
<pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2021/01/2021-01-25/</guid>
<description>&lt;p&gt;I was recently having a discussion with a friend when they brought up a new problem they were looking into. He asked me if it was a good candidate for Mathematical Planning and I said, &amp;ldquo;Absolutely!&amp;rdquo; I am abstracting away the specific domain, but this is the essence of the problem.&lt;/p&gt;
&lt;p&gt;There are a set of machines which can process jobs. The jobs are of different types and sizes. There are three job-types: A, B, and C. Each machine has different job-types that it can process. Some machines can process any job-type while other machines can only work on one or two. At the beginning of the day, we are given a set of jobs to assign to the machines. We want to assign jobs to machines such that a) the machines are evenly loaded and b) we minimize the number of different job-types each machine must process.&lt;/p&gt;
&lt;p&gt;An ideal plan would have each machine with the same amount of work and only processing a single job-type. The reason we want a machine to only process a single job-type is to minimize the waste associated with changing between job-types. Switching between job-types is fast, it just creates unwanted waste. Let&amp;rsquo;s start with creating a small domain model and generate some example data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can find the full code example for this post &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/2021-01-22-MachineAllocation/2021-01-22-MachineAllocation.fsx&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-domain-for-job-assignments&#34;&gt;A Domain for Job Assignments&lt;/h2&gt;
&lt;p&gt;Based on the description there are some clear types that we need to define: &lt;code&gt;Machine&lt;/code&gt;, &lt;code&gt;Job&lt;/code&gt;, and &lt;code&gt;JobType&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;RequireQualifiedAccess&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JobType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; A
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; B
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; C

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Id &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int
    JobType &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; JobType
    Size &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;ToString&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job_{this.Id}&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Machine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Id &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int
    JobTypes &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;JobType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;ToString&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Machine_{this.Id}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like to override the &lt;code&gt;ToString&lt;/code&gt; method because the &lt;code&gt;ConstraintBuilder&lt;/code&gt; and &lt;code&gt;DecisionBuilder&lt;/code&gt; in &lt;code&gt;Flips&lt;/code&gt; use &lt;code&gt;ToString&lt;/code&gt; for the naming of constraints and decisions. &lt;code&gt;JobType&lt;/code&gt; is a straightforward Discriminated Union with three different cases &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. &lt;code&gt;Job&lt;/code&gt; has an &lt;code&gt;Id&lt;/code&gt; field for identifying a particular &lt;code&gt;Job&lt;/code&gt;, a &lt;code&gt;JobType&lt;/code&gt; which describes the type of job that it is, and the &lt;code&gt;Size&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Machine&lt;/code&gt; type has an &lt;code&gt;Id&lt;/code&gt; field and a &lt;code&gt;JobTypes&lt;/code&gt; field. The &lt;code&gt;JobTypes&lt;/code&gt; field is a &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;JobType&lt;/code&gt;. This represents the jobs the &lt;code&gt;Machine&lt;/code&gt; can process.&lt;/p&gt;
&lt;p&gt;We now want to setup some data for us to be able to play with. These will be the parameters which will help us generate random data for us to work with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Set of JobTypes for iterating over and sampling from
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobTypes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;
        JobType.A
        JobType.B
        JobType.C
    &lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Some theoretical JobTypeSets to be used in generating
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// random Machines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobTypeSets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;
        Set jobTypes
        Set jobTypes&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..]&lt;/span&gt;
        Set jobTypes&lt;span style=&#34;color:#f92672&#34;&gt;.[..&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Setting up parameters for the example
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;123&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberOfJobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 20
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberOfMachines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; minJobSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxJobSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxWorkDifference &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;jobTypes&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt; which holds each of the possible &lt;code&gt;JobType&lt;/code&gt; cases. We will use this to create random jobs. The &lt;code&gt;jobTypeSets&lt;/code&gt; value is an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Set&amp;lt;JobType&amp;gt;&lt;/code&gt;. These are the possible values for the &lt;code&gt;JobTypes&lt;/code&gt; field of &lt;code&gt;Machine&lt;/code&gt; that we will use for generating random machines. For this example, we will have 20 jobs and 5 machines to assign them to. &lt;code&gt;minJobSize&lt;/code&gt; will control how small a job can be and &lt;code&gt;maxJobSize&lt;/code&gt; will determine how large. The &lt;code&gt;maxWorkDifference&lt;/code&gt; parameter will determine how different the loading of machines that we will allow.&lt;/p&gt;
&lt;p&gt;We now create some convenience functions for generating random data. We will also add a function for looking up a key in a &lt;code&gt;Map&lt;/code&gt; but returning a default value when the key is not present.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; randomJobSize &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    rng&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Next&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;minJobSize&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; maxJobSize&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; randomJobType &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    jobTypes&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Next&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; jobTypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; randomJobTypeSet &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    jobTypeSets&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Next&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; jobTypeSets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Useful when you want to look up a key in a Map but you want it to provide
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// a default value if the key is missing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tryFindDefault &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;defaultValue&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; Map.tryFind key m &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Some v &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; v
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; defaultValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now generate a random set of jobs and machines to work with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create some examples jobs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;numberOfJobs&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; 
        Id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; id
        JobType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randomJobType rng
        Length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randomJobSize rng 
    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Create some test machines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; machines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;numberOfMachines&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; id
        JobTypes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randomJobTypeSet rng
    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;formulating-the-problem&#34;&gt;Formulating the Problem&lt;/h2&gt;
&lt;p&gt;Now that we have some data to work with, we can get to formulating our model. Let&amp;rsquo;s go ahead and open &lt;code&gt;Flips&lt;/code&gt;. I love working with VS Code, Ionide, and &lt;code&gt;.fsx&lt;/code&gt; files for this kind of exploration. The new &lt;code&gt;#r &amp;quot;nuget: &amp;lt;library name&amp;gt;&amp;quot;&lt;/code&gt; syntax for using Nuget packages has been a game changer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nuget: Flips&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.Types
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.SliceMap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to create a &lt;code&gt;Map&lt;/code&gt; where they key is a &lt;code&gt;JobType&lt;/code&gt; and the value is a list of &lt;code&gt;Job&lt;/code&gt; that are of that type. This will make it easy for us to lookup the &lt;code&gt;Job&lt;/code&gt;s of a given type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A Map from JobType to the Jobs which are of that type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobsForJobType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    jobs
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.groupBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; job &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; job&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;JobType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now want to create a 1-dimensional &lt;code&gt;SliceMap&lt;/code&gt; where the &lt;code&gt;&#39;key&lt;/code&gt; is a &lt;code&gt;Job&lt;/code&gt; and the &lt;code&gt;&#39;value&lt;/code&gt; is the size of the job. This will make it easy for us to sum up how much work has been assigned to a &lt;code&gt;Machine&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A SliceMap where the key is a Job and the value is the size of the Job
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobSizes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    jobs
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; job &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; job&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; job&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Size&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s create the set of &lt;code&gt;Decision&lt;/code&gt;s which will represent us assigning a &lt;code&gt;Job&lt;/code&gt; to a &lt;code&gt;Machine&lt;/code&gt;. We will store this in a 3-dimensional &lt;code&gt;SliceMap&lt;/code&gt; keyed by the &lt;code&gt;Machine&lt;/code&gt;, the &lt;code&gt;JobType&lt;/code&gt;, and finally the &lt;code&gt;Job&lt;/code&gt;. The reason we key by the &lt;code&gt;JobType&lt;/code&gt; will become apparent later in the formulation. We will use a &lt;code&gt;Boolean&lt;/code&gt; decision where &lt;code&gt;1.0&lt;/code&gt; indicates that we are assigning the &lt;code&gt;Job&lt;/code&gt; to a &lt;code&gt;Machine&lt;/code&gt; and &lt;code&gt;0.0&lt;/code&gt; indicates not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The Decisions which represent assigning a Job to a Machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The JobType index allows us to slice along the job type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// which is useful in some of the constraints
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; assignments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assignment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; machine &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; machines &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jobType &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; jobTypes &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; job &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Map.tryFindDefault jobType [] jobsForJobType &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            Boolean
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have these decisions which represent assigning a job to a machine, we can formulate our first and most obvious constraints. Each job must be assigned to one machine. For each job we say that the sum of &lt;code&gt;assignments&lt;/code&gt; for a given &lt;code&gt;job&lt;/code&gt; across all machines and all job-types must be &lt;code&gt;1.0&lt;/code&gt;. This forces the solver to find a solution where each &lt;code&gt;job&lt;/code&gt; is assigned once.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Each job must be assigned
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; jobsAssignmentConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JobAssignment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; job &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; jobs &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            sum assignments&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; job&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;constraint-or-objective&#34;&gt;Constraint or Objective?&lt;/h2&gt;
&lt;p&gt;We now come to an interesting question. Our original problem statement said that we want to minimize the number of different job-types a machine must deal with. Ideally each machine only works on a single job-type. We also said that we want the machines evenly loaded. When I was chatting with my friend I dug into this point. Which one of these objectives is more important because we can&amp;rsquo;t optimize for both? This is where a modeler needs to work with their client to help them understand what the most important thing is truly.&lt;/p&gt;
&lt;p&gt;In our case, minimizing the different job-types for machines was the most important, so long as the machines were not too unevenly loaded. This means that the goal for even loading becomes a constraint and the objective remains the minimization of different job-types for machines. We will explore variations of this problem in future posts.&lt;/p&gt;
&lt;h2 id=&#34;controlling-the-difference-in-loading&#34;&gt;Controlling the Difference in Loading&lt;/h2&gt;
&lt;p&gt;Now that we have decided that even machine loading needs to be a constraint, we need to create some &lt;code&gt;Decision&lt;/code&gt;s to control for it. We will create two &lt;code&gt;Decision&lt;/code&gt;s. One will represent the value of the machine with the greatest loading and the other the machine with the least loading.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A Decision which is meant to represent the MaxWork value across all Machines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxWork &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Decision.createContinuous &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxWork&amp;#34;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 infinity
&lt;span style=&#34;color:#75715e&#34;&gt;// A Decision which is meant to represent the MinWork value across all Machines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; minWork &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Decision.createContinuous &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinWork&amp;#34;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 infinity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we want to create a &lt;code&gt;Constraint&lt;/code&gt; which states that the difference between these two values is not greater than the maximum allowed difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We constrain the difference between the most heavily loaded machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// and the least loaded
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxWorkDifferenceConstraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxWorkDifferent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxWork &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; minWork &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; maxWorkDifference&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, that&amp;rsquo;s great but will it do anything? Right now, there is nothing that forces the &lt;code&gt;maxWork&lt;/code&gt; decision to be equal to the loading of the most heavily loaded machine. There&amp;rsquo;s also nothing which forces &lt;code&gt;minWork&lt;/code&gt; to be equal to the loading of the most lightly loaded machine. The solver could set the values to &lt;code&gt;0.0&lt;/code&gt; and be done with it. We need to create some constraints which will force &lt;code&gt;maxWork&lt;/code&gt; and &lt;code&gt;minWork&lt;/code&gt; to take on the loading of the most heavily and most lightly loaded machines.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some constraints which state that the value of the &lt;code&gt;maxWork&lt;/code&gt; decision must be greater than or equal to the loading of all the machines. This will force it to be a value above or equal to the maximum loading.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The maxWork Decision must be greater or equal to all of the total work
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// for each Machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxWorkConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxWork&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; machine &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; machines &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            maxWork &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;==&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;assignments&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;machine&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; jobSizes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We do a similar thing for the &lt;code&gt;minWork&lt;/code&gt; decision. In this case we will say that &lt;code&gt;minWork&lt;/code&gt; must be less than or equal to all the loadings of the machines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The minWork Decision must be less or equal to all of the total work
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// for each Machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; minWorkConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinWork&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; machine &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; machines &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            minWork &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;assignments&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;machine&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; jobSizes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;maxWorkConstraints&lt;/code&gt; and &lt;code&gt;minWorkConstraints&lt;/code&gt; will force &lt;code&gt;maxWork&lt;/code&gt; and &lt;code&gt;minWork&lt;/code&gt; to take on the values of the most heavily and lightly loaded machines respectively. &lt;code&gt;maxWorkDifferenceConstraint&lt;/code&gt; states that the difference between &lt;code&gt;maxWork&lt;/code&gt; and &lt;code&gt;minWork&lt;/code&gt; must be within the permissable bounds. All together these constraints will prevent the solver from distributing jobs across machines unevenly.&lt;/p&gt;
&lt;h2 id=&#34;minimizing-the-job-types-for-machines&#34;&gt;Minimizing the Job-Types for Machines&lt;/h2&gt;
&lt;p&gt;We now need to quantify how many different job-types are being assigned to machines. To do this, we will create a set of &lt;code&gt;Boolean&lt;/code&gt; decisions which will indicate whether we have decided to assign a job of a given job-type to a machine. We will store these in a 2-dimensional &lt;code&gt;SliceMap&lt;/code&gt; where the keys are the &lt;code&gt;Machine&lt;/code&gt; and the &lt;code&gt;JobType&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; will represent that we have decided to assign a given &lt;code&gt;JobType&lt;/code&gt; to a &lt;code&gt;Machine&lt;/code&gt;. &lt;code&gt;0&lt;/code&gt; will indicate that we did not. I like to think of this as &amp;ldquo;turning on&amp;rdquo; or &amp;ldquo;turning off&amp;rdquo; the job-type for the machine. We will call these decisions the &lt;code&gt;setups&lt;/code&gt; decisions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A Decision which indicates whether we setup a given Machine for a 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// JobType at any point
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; setups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setups&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; machine &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; machines &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jobType &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; jobTypes &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            Boolean
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now want to create some constraints which will force the solver to turn on the decision to allow the assigning of a job-type to a machine. We will do this by saying that the sum of jobs of a given job-type must be less than or equal to our decision to assign that job-type to the machine multiplied by a large number. This will force the solver to &amp;ldquo;turn on&amp;rdquo; the job-type for the machine. In our case the &amp;ldquo;large number&amp;rdquo; will be the total number of jobs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We must turn the setups value for a given Machine and JobType to 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// if we assign a Job of the given JobType to the Machine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; setupConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SetupRequired&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; machine &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; machines &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jobType &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; jobTypes &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;assignments&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;machine&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; jobType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; numberOfJobs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; setups&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;machine&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; jobType&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now create an expression which represents the number of different job-types that are assigned to machines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// An expression which is the sum of the Setups that will need to be performed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberSetupsExpression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum setups
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use this expression to create our objective of minimizing the number of different job-types assigned to a machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We want to minimize the number of setups
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; minSetupsObjective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinSetups&amp;#34;&lt;/span&gt; Minimize numberSetupsExpression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now compose our model from the parts that we have created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Compose the model
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create minSetupsObjective
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints jobsAssignmentConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints maxWorkConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints minWorkConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint maxWorkDifferenceConstraint
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints setupConstraints
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now ask the solver to find us a solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Give the solver plenty of time to find a solution
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; settings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Settings.basic &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; MaxDuration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 60_000L &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve settings model
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to see the code that prints out the results you can check it out &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/260d21184df7f5803a4c6a72ba13e8b61db4962d/2021-01-22-MachineAllocation/2021-01-22-MachineAllocation.fsx#L195&#34;&gt;here&lt;/a&gt;. This is the solution the solver found.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;Assignments:
Machine: 1
        Job: 3
        Job: 9
        Job: 12
        Job: 14
        Job: 18
Machine: 2
        Job: 4
        Job: 5
        Job: 20
Machine: 3
        Job: 7
        Job: 8
        Job: 10
        Job: 11
Machine: 4
        Job: 1
        Job: 15
        Job: 16
        Job: 19
Machine: 5
        Job: 2
        Job: 6
        Job: 13
        Job: 17

Machine Loading:
Machine: 1 | Total Load: 6
Machine: 2 | Total Load: 5
Machine: 3 | Total Load: 6
Machine: 4 | Total Load: 6
Machine: 5 | Total Load: 6

Max Diffence In Loading: 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve only begone to explore this model. There are quite a few variations and nuances that I will dive into in the posts to come. In the future we will discuss adding machine capacity and dealing with infeasible models. We will also explore adding restrictions on just how much of a job-type can be assigned to a given machine. Some job-types cause more wear and therefore we do not want too much assigned to a single machine. We will also look at needing to re-plan part way through the day and look at scheduling over a longer time horizon.&lt;/p&gt;
&lt;p&gt;These types of scheduling problems are common and therefore it&amp;rsquo;s valuable for us to explore how we can play and tweak with this model to make it suit our needs. Feel free to reach out with questions and ideas for modeling challenges in the future!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Minimizing Waste for the Cutting Stock Problem</title>
<link>https://matthewcrews.com/blog/2021/01/2021-01-11/</link>
<pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2021/01/2021-01-11/</guid>
<description>&lt;p&gt;I was recently posed the question, &amp;ldquo;Can you use Mathematical Planning to optimize the Cutting Stock problem?&amp;rdquo; For those who are not familiar with this problem, you can find the Wikipedia article &lt;a href=&#34;https://en.wikipedia.org/wiki/Cutting_stock_problem&#34;&gt;here&lt;/a&gt;. In summary, you have a stock size of paper material from which you need to produce smaller sizes. In the example provided on Wikipedia, the stock size is 5600mm. You are asked to produce a variety of sizes between 1380mm and 2200mm. The ideal plan is one which minimizes the amount of waste. This is a classic planning problem that can actually be reduced to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Knapsack_problem&#34;&gt;knapsack problem&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Full code for this post can be found &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/CuttingStockProblem.fsx&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are the cut lengths and quantities you need to produce in the example problem.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Width [mm]&lt;/th&gt;
&lt;th&gt;Number of Items&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1380&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1520&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1560&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1710&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1820&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1880&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1930&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2050&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2100&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2140&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2150&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2200&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are a variety of different ways you can cut the stock size into the smaller sizes. For example, you could produce 3 x 1820mm cuts from a 5600mm stock roll. You could also do 2200mm, 1820mm, and 1560mm. In total there are 308 possible combinations of cuts, not including the empty combination which has zero cuts. The most important thing to realize when approaching this problem is that the order you make the cuts does not matter. A more technical term would be that the order of cuts is &lt;a href=&#34;https://en.wikipedia.org/wiki/Commutative_property&#34;&gt;commutative&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generating-the-possible-cuts&#34;&gt;Generating the Possible Cuts&lt;/h2&gt;
&lt;p&gt;The most difficult part of this problem turned out to be the generating of the possible cuts. Before we dive right into that though, let&amp;rsquo;s create some simple domain types to describe our problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cut&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cut &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Plan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Plan &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Cut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;Cut&lt;/code&gt; is a length we want to create from our stock rolls. A &lt;code&gt;Plan&lt;/code&gt; is a set of cuts. We want an algorithm which will generate the possible &lt;code&gt;Plan&lt;/code&gt;s for a set of &lt;code&gt;Cut&lt;/code&gt;s for our stock roll. To make our lives easier, I am going to go ahead and write some functions which allow us to work with these types more easily.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Cut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;/// Take a Cut and return the length as a float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cut length&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        length

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Plan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;/// Give me a Plan with no cuts
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; empty &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Plan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Plan Map.empty

    &lt;span style=&#34;color:#e6db74&#34;&gt;/// Give me the total length of cuts in the plan
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Plan plan&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
       plan
       &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeyValue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cut cut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; cut &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;/// Add a Cut to a Plan and return a new Plan
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; addCut &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cut&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Cut&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Plan plan&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; Map.tryFind cut plan &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Some count &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Plan &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map.add cut &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Plan &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map.add cut 1 plan&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;/// Give me the count of each distinct cut in a given Plan
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cutCounts &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Plan plan&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        plan
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeyValue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; cut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have our domain for working in this space. Let&amp;rsquo;s talk about the function which will generate the possible &lt;code&gt;Plan&lt;/code&gt;s given a set of &lt;code&gt;Cut&lt;/code&gt;s and a Stock Length. We want something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; generatePlans &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stockLength&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cuts&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Cut &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Plan &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Do some magic here??
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, I&amp;rsquo;m going to show you the answer that I came up with. What you are not seeing though is the couple of hours I spent with my notebook sketching out how this would work. It was not intuitive to me, so I don&amp;rsquo;t want you to think that this stuff just materializes out of thin air. I had to struggle. It was not intuitive but by the time I was done, I felt immense satisfaction.&lt;/p&gt;
&lt;p&gt;The first thing I am going to do is sort &lt;code&gt;cuts&lt;/code&gt; from the shortest length to the longest and ensure that I only have distinct cuts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sortedCuts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    cuts 
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.distinct
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sortBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cut length&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; length&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This algorithm is going to take advantage of the fact that the cuts are sorted from shortest to longest so that it can terminate early. Now I want to write a recursive function which is going to take an initially empty &lt;code&gt;Plan&lt;/code&gt; and try adding cuts to it. It will keep adding cuts until it exceeds the Stock Length. You can think of this as a sort of &lt;a href=&#34;https://en.wikipedia.org/wiki/Constructive_heuristic&#34;&gt;Constructive Heuristic&lt;/a&gt;. I&amp;rsquo;m going to show you the full function but then we will unpack it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rec generate &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;candidates&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Plan &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Cut &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;approved&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Plan &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; candidates &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; approved
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; testCandidate&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;remainingCandidates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cuts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; testCandidate
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; cuts &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newApproved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;approved
            generate remainingCandidates newApproved
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nextCut&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;remainingCuts &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; Plan.length plan &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Cut.length nextCut &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; stockLength &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newPlan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Plan.addCut nextCut plan
                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newCandidates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newPlan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cuts&lt;span style=&#34;color:#f92672&#34;&gt;)::(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; remainingCuts&lt;span style=&#34;color:#f92672&#34;&gt;)::&lt;/span&gt;remainingCandidates
                generate newCandidates approved
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newApproved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;approved
                generate remainingCandidates newApproved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have a list of plans and possible cuts which we are exploring called &lt;code&gt;candidates&lt;/code&gt;. As candidates are approved, they are added to the &lt;code&gt;approved&lt;/code&gt; list of plans. Keep in mind, this function will be initially called with an empty &lt;code&gt;Plan&lt;/code&gt; and the full list of &lt;code&gt;Cut&lt;/code&gt;s available. Let&amp;rsquo;s go through the cases step by step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; candidates &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; approved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the terminal case. We have evaluated all the &lt;code&gt;Plan&lt;/code&gt;s that were generated, and we return the &lt;code&gt;Plan&lt;/code&gt;s in the &lt;code&gt;approved&lt;/code&gt; list. Now for the case where we still have remaining candidates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; testCandidate&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;remainingCandidates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cuts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; testCandidate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, there is at least one remaining candidate to evaluate, &lt;code&gt;testCandidate&lt;/code&gt;. We create &lt;code&gt;plan&lt;/code&gt; and &lt;code&gt;cuts&lt;/code&gt; values using structural unpacking of &lt;code&gt;testCandidate&lt;/code&gt;. &lt;code&gt;plan&lt;/code&gt; is the &lt;code&gt;Plan&lt;/code&gt; we are testing. &lt;code&gt;cuts&lt;/code&gt; is the list of possible cuts we can add to &lt;code&gt;plan&lt;/code&gt;. You will see that this list will shrink as our algorithm continues.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s match against the list of &lt;code&gt;Cut&lt;/code&gt;s to see what we should do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; cuts &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newApproved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;approved
    generate remainingCandidates newApproved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the list of cuts is empty, as indicated by the &lt;code&gt;[]&lt;/code&gt; case, then we create &lt;code&gt;newApproved&lt;/code&gt; by adding &lt;code&gt;plan&lt;/code&gt; to &lt;code&gt;approved&lt;/code&gt; and calling &lt;code&gt;generate&lt;/code&gt; again. Now let&amp;rsquo;s look at the case where there are &lt;code&gt;Cut&lt;/code&gt;s remaining.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; nextCut&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;remainingCuts &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; Plan.length plan &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Cut.length nextCut &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; stockLength &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newPlan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Plan.addCut nextCut plan
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newCandidates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newPlan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cuts&lt;span style=&#34;color:#f92672&#34;&gt;)::(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; remainingCuts&lt;span style=&#34;color:#f92672&#34;&gt;)::&lt;/span&gt;remainingCandidates
        generate newCandidates approved
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; newApproved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;approved
        generate remainingCandidates newApproved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now look at &lt;code&gt;nextCut&lt;/code&gt; which we know is the shortest of the &lt;code&gt;Cut&lt;/code&gt;s in the list due to our sorting. We check that if we add this &lt;code&gt;Cut&lt;/code&gt; to &lt;code&gt;plan&lt;/code&gt; whether we will exceed the &lt;code&gt;stockLength&lt;/code&gt; limit. If we do not exceed the limit, we create a new plan &lt;code&gt;newPlan&lt;/code&gt;. We will add &lt;code&gt;newPlan&lt;/code&gt; to the list of &lt;code&gt;candidates&lt;/code&gt; with &lt;code&gt;cuts&lt;/code&gt; as the list of possible &lt;code&gt;Cut&lt;/code&gt;s to explore. We also add the current &lt;code&gt;Plan&lt;/code&gt; we are testing, &lt;code&gt;plan&lt;/code&gt;, to the list of &lt;code&gt;candidates&lt;/code&gt; but now with &lt;code&gt;remainingCuts&lt;/code&gt; as the possible &lt;code&gt;Cut&lt;/code&gt;s to add. Take your time with that. That puzzle took me awhile to figure out.&lt;/p&gt;
&lt;p&gt;In the case that the length of &lt;code&gt;nextCut&lt;/code&gt; is too long, we add &lt;code&gt;plan&lt;/code&gt; to &lt;code&gt;approved&lt;/code&gt; and then continue to search the remaining &lt;code&gt;candidates&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We call our recursive function with an empty &lt;code&gt;Plan&lt;/code&gt; to start and the full list of &lt;code&gt;Cut&lt;/code&gt;s to get all the possible &lt;code&gt;Plan&lt;/code&gt;s we would want to consider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; initialCandidate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Plan.empty&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sortedCuts
generate &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;initialCandidate&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-optimization-problem&#34;&gt;The Optimization Problem&lt;/h2&gt;
&lt;p&gt;The optimization model for this is rather simple. We will create the list of possible &lt;code&gt;Plan&lt;/code&gt;s using the function we just described. We will associate an integer &lt;code&gt;Decision&lt;/code&gt; with each &lt;code&gt;Plan&lt;/code&gt; which is to indicate how many of each of those plans we will schedule. Let&amp;rsquo;s setup the data for our model so that we can build it. All this data is taken from the Wikipedia example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cuts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        1380&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1520&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1560&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1710&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1820&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1880&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        1930&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2050&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2100&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2140&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2150&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        2200&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map Cut

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cutRequirements &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Cut 1380&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 22&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1520&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 25&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1560&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 12&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1710&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 14&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1820&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 18&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1880&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 18&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 1930&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2050&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 12&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2100&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 14&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2140&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 16&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2150&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 18&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Cut 2200&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; stockLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5600&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; plans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generatePlans stockLength cuts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now want to start building our model. We&amp;rsquo;ll open the namespaces we need and create our set of &lt;code&gt;Decision&lt;/code&gt;s associated with each &lt;code&gt;Plan&lt;/code&gt; in &lt;code&gt;plans&lt;/code&gt;. We are using &lt;a href=&#34;http://matthewcrews.com/SliceMap/#/&#34;&gt;SliceMaps&lt;/a&gt; to simplify formulation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.Types
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.SliceMap

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; planDecs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlanCount&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; plan &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; plans &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        Integer &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; infinity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then need to calculate the number of each &lt;code&gt;Cut&lt;/code&gt; that is associated with each &lt;code&gt;Plan&lt;/code&gt;. This will be important for us to formulate the constraints around meeting the minimum cut requirements. We will store this information in a 2-D &lt;code&gt;SliceMap&lt;/code&gt; where the first index is the &lt;code&gt;Plan&lt;/code&gt; and the second index is the &lt;code&gt;Cut&lt;/code&gt;. The value in the &lt;code&gt;SliceMap&lt;/code&gt; is the number of a given &lt;code&gt;Cut&lt;/code&gt; in the &lt;code&gt;Plan&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; planCutCounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    plans
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.collect &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; plan &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Plan.cutCounts plan
                                &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cut&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cut&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s now actually simple to create our constraints. We will create a constraint for each &lt;code&gt;Cut&lt;/code&gt; in our data stating that the solution must meet the minimum quantity of each &lt;code&gt;Cut&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; cutRequirementConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CutRequirements&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cut &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; cuts &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;planDecs &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; planCutCounts&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cut&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;==&lt;/span&gt; cutRequirements&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;cut&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our objective is to minimize the total number of stock rolls required to meet the demand for each &lt;code&gt;Cut&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinRolls&amp;#34;&lt;/span&gt; Minimize &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum planDecs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We combine these into our model and solve.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create objective
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints cutRequirementConstraints

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve Settings.basic model
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s go ahead and provide some nice printing of the results to the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Optimal solution &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        Solution.getValues solution planDecs
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.filter &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; quantity &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; quantity &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; totalNumberOfRolls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        values
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeyValue&lt;span style=&#34;color:#f92672&#34;&gt;(_,&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity | Plan&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; KeyValue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; quantity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; values &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        printfn &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8.0f{quantity} | {plan}&amp;#34;&lt;/span&gt;

    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;==========================================&amp;#34;&lt;/span&gt;
    printfn &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Number of Rolls: {totalNumberOfRolls}&amp;#34;&lt;/span&gt;
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;==========================================&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; failwith &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to solve&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run the full script, you will see the following printed out.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;Quantity | Plan
8 | Plan (map [(Cut 1380.0, 1); (Cut 2000.0, 1); (Cut 2200.0, 1)])
7 | Plan (map [(Cut 1380.0, 1); (Cut 2050.0, 1); (Cut 2150.0, 1)])
7 | Plan (map [(Cut 1380.0, 1); (Cut 2100.0, 2)])
10 | Plan (map [(Cut 1520.0, 1); (Cut 1880.0, 1); (Cut 2200.0, 1)])
10 | Plan (map [(Cut 1520.0, 1); (Cut 1930.0, 1); (Cut 2140.0, 1)])
3 | Plan (map [(Cut 1520.0, 1); (Cut 1930.0, 1); (Cut 2150.0, 1)])
2 | Plan (map [(Cut 1520.0, 1); (Cut 2000.0, 1); (Cut 2050.0, 1)])
2 | Plan (map [(Cut 1560.0, 1); (Cut 1820.0, 1); (Cut 2200.0, 1)])
8 | Plan (map [(Cut 1560.0, 1); (Cut 1880.0, 1); (Cut 2150.0, 1)])
1 | Plan (map [(Cut 1560.0, 2); (Cut 2050.0, 1)])
2 | Plan (map [(Cut 1710.0, 1); (Cut 1820.0, 1); (Cut 2050.0, 1)])
6 | Plan (map [(Cut 1710.0, 2); (Cut 2140.0, 1)])
7 | Plan (map [(Cut 1820.0, 2); (Cut 1930.0, 1)])
==========================================
Total Number of Cuts: 73
==========================================
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you check the Wikipedia article, you will see that the best possible answer is 73. There are multiple, equally good solutions. This is called Degeneracy. Problems with high levels of Degeneracy can be difficult to solve but fortunately this one was not. You may run this code on your machine and get a different set of plans, but you&amp;rsquo;ll still have a total of 73 stock rolls required.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This was a fun challenge and was a bit of a brain teaser. These types of problems are everywhere in manufacturing planning and scheduling. Minimizing the amount of raw resources required is incredibly important but can be brutally difficult. It&amp;rsquo;s often done by domain experts spending hours with Excel finding a plan that meets all the requirements. These are some of my favorite problems to turn into Mathematical Planning models. Thank you for your time and I look forward to chatting next week!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Learning Resources for F#</title>
<link>https://matthewcrews.com/blog/2021/01/2021-01-09/</link>
<pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2021/01/2021-01-09/</guid>
<description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VSDn57oROC8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;One of the questions that I get quite a bit is, &amp;ldquo;How did you learn F#?&amp;rdquo; I keep getting this question, so I decided to write a short post where I laid out what I have found to be the most useful resources to develop my F# skills.&lt;/p&gt;
&lt;h2 id=&#34;practice&#34;&gt;Practice&lt;/h2&gt;
&lt;p&gt;This first piece of advice that I give to people is to choose an algorithm they already know and write it in F#. Don&amp;rsquo;t try to learn a new concept and a new language at the same time. I am familiar with the Simulated Annealing algorithm, so I use it as my first algorithm that I try to write in any new language. The process of trying to write something you already know but in a new way is great for exposing your underlying presuppositions. It forces you out of your comfort zone and challenges you to rethink problems.&lt;/p&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;p&gt;I, for one, love reading books. I enjoy having a physical copy of something that I can mark up with notes or put sticky notes into for quick reference. There is something about a person taking the time to organize their thoughts that creates a cohesive narrative. Each of these books are highly recommended. They are the foundation of all my F# understanding.&lt;/p&gt;
&lt;h3 id=&#34;get-programming-with-f&#34;&gt;Get Programming With F#&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Link: &lt;a href=&#34;https://www.amazon.com/Get-Programming-guide-NET-developers/dp/1617293997&#34;&gt;Get Programing with F#&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the first book I recommend to an experienced developer coming to F#. It does an excellent job of providing a comparison and contrast between C# and F#. I have found this is incredibly helpful in providing a bridge for developers coming to F#. I did not spend much time in other languages before learning F# so I had not developed many paradigms around Object-Oriented or procedural programming. I&amp;rsquo;ve seen people who have been steeped in OO struggle transitioning to functional style. This book provides some useful bridges between paradigms.&lt;/p&gt;
&lt;h3 id=&#34;stylish-f&#34;&gt;Stylish F#&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Link: &lt;a href=&#34;https://www.amazon.com/Stylish-Crafting-Elegant-Functional-Code/dp/1484239997&#34;&gt;Stylish F#&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is one of the most formative books for me. I knew how to write F# before reading this book but what this book did was help me understand why I was writing code in a particular way. Before this book, I kept writing code that felt clunky. It did the job, but it was not as clean and elegant as I would like. Kit provides some valuable insight into how to form F# code that is not only effective but delightful. I found that I enjoyed writing F# more after reading this book. This is the first book I recommend to new developers. If they ingest and absorb these principles, they will avoid many heartaches. This book really needs to be promoted more.&lt;/p&gt;
&lt;h3 id=&#34;domain-modeling-made-functional&#34;&gt;Domain Modeling Made Functional&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Link: &lt;a href=&#34;https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven/dp/1680502549&#34;&gt;Domain Modeling Made Functional&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A must read for anyone really, but especially F# developers. There is a ridiculous amount of wisdom packed into these pages. Scott has spent years writing code and the lessons he shares in this book are incredible. I constantly try to instill new developers with the idea that abstractions are not just to hide details of implementation. A good abstraction provides a barrier around context. We often just think of an abstraction as obscuring the underlying implementation. Abstractions should also remove the need to be concerned about services adjacent to ours. I believe this is the idea of a bounded context and it is so critical for writing code that can be scaled, maintained, and reasoned about. Healthy systems having strong reasoning boundaries. Read this book, no matter what language you are writing.&lt;/p&gt;
&lt;h3 id=&#34;machine-learning-projects-for-net-developers&#34;&gt;Machine Learning Projects for .NET Developers&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Link: &lt;a href=&#34;https://www.amazon.com/Machine-Learning-Projects-NET-Developers/dp/1430267674&#34;&gt;Machine Learning Projects for .NET Developers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This one may be domain specific, but I recommend it to anyone who is wanting to understand how to translate algorithms to F#. What Mathias does in this book is implement ML algorithms from the ground up. Many other ML books simply tell you how to use an existing library. Mathias takes a different tactic and takes you behind the curtain and shows you how they are built. I think it really shows the elegance of F# for expressing algorithms. Highly recommended for someone interested in F#, ML, and algorithm implementation.&lt;/p&gt;
&lt;h2 id=&#34;blogs&#34;&gt;Blogs&lt;/h2&gt;
&lt;h3 id=&#34;f-for-fun-and-for-profit&#34;&gt;F# for Fun and for Profit&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://fsharpforfunandprofit.com/&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At some point, every F# developer finds their way to these hallowed halls. I haven&amp;rsquo;t found an F# developer yet who hasn&amp;rsquo;t mentioned Scott Wlaschin&amp;rsquo;s blog when they describe their journey to F#. There is simply a cornucopia of knowledge in these pages. The only warning is that some of the content is old and may be out of style. I can&amp;rsquo;t recommend this blog enough. Scott has poured his years of experience into these pages and it is a blessing to us developers following in his footsteps.&lt;/p&gt;
&lt;h3 id=&#34;mark-seemanns-blog&#34;&gt;Mark Seemann&amp;rsquo;s Blog&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.ploeh.dk/&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mark has been speaking and teaching on functional programming for years. His blog is sure to inspire. I have had my mind regularly expanded reading through his posts. He has a way of reframing how you see the world which can fill you with awe. One of my best memories was sitting with him for an hour talking about programming as art. He is a deep thinker and how you think about code will be expanded if you spend any amount of time on his blog.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Maximizing Profitability of Inventory with Mathematical Planning and Machine Learning in F# - Part 3</title>
<link>https://matthewcrews.com/blog/2021/01/2020-01-01/</link>
<pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2021/01/2020-01-01/</guid>
<description>&lt;p&gt;In the previous two posts in this series we introduced the Food Cart Problem. We want a plan for stocking our Food Cart which will maximizes our revenue. In the &lt;a href=&#34;https://matthewcrews.com/blog/2020/12/2020-12-14/&#34;&gt;first post&lt;/a&gt; we discussed the foods that we can stock and the restrictions we are operating under. We introduced a simple heuristic for stocking the food cart and created a simulation in order to validate what our expected revenue is.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://matthewcrews.com/blog/2020/12/2020-12-21/&#34;&gt;second post&lt;/a&gt; we formulated a Mathematical Planning model to create a plan to maximize our expected revenue. We validated that the plan found with Mathematical Planning is superior to the simple heuristic in the first post through simulations and statistical tests.&lt;/p&gt;
&lt;p&gt;In this final post of the series, we will create a simple Machine Learning model to make predictions of expected demand using the weather conditions as predictors. We will combine the tools of Mathematical Planning and Machine Learning to create an even more profitable algorithm for stocking the food cart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To see all the code for this post, go &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/FoodCartSeries/FoodCart-Part3.fsx&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;generating-test-data&#34;&gt;Generating Test Data&lt;/h2&gt;
&lt;p&gt;Since this problem is a hypothetical, we need to generate data to train a Machine Learning model on. The demand for food will be modeled using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Poisson_distribution&#34;&gt;Poisson Distribution&lt;/a&gt; but the mean of the demand, the $\lambda$, depend on the weather. We are going to generate data that follows a simple model.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\text{Demand Mean} = \ &amp;amp;\text{Baseline Demand} \ + \\&lt;br&gt;
&amp;amp;\text{Temperature Coefficient} \times \text{temperature} \ + \\&lt;br&gt;
&amp;amp;\text{Condition Offset}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Each food will have a baseline amount of demand, Baseline Demand. The demand for the food will go up or down depending on the temperature. The weather condition (Sunny, Cloudy, Rainy) will also bump the demand up or down in a stepwise manner. We will generate several months’ worth of weather conditions and then use them to generate our historical demand data.&lt;/p&gt;
&lt;p&gt;We want to make our code clear and maintainable so we create a domain model. Let&amp;rsquo;s create types to describe a day, temperature, conditions, and weather.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Day&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Day &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; int

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Temperature&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Temperature &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Sunny
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Cloudy
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Rainy

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Weather&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Condition &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Condition
    Temperature &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Temperature
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can create the type which holds the parameters for our demand model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemandModelParameters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    BaselineDemand &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
    TemperatureCoefficient &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
    ConditionOffsets &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Condition&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our model will take the &lt;code&gt;Weather&lt;/code&gt; as an input and simulate a random &lt;code&gt;Demand&lt;/code&gt; based on the statistical model we just proposed. Let&amp;rsquo;s create a type which describes this simulation result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;serving&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Demand&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Demand &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemandSimulationResult&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Day &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Day
    Weather &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Weather
    Demand &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Demand
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can write a function which takes the &lt;code&gt;DemandModelParameters&lt;/code&gt;, &lt;code&gt;Weather&lt;/code&gt; and gives us a random &lt;code&gt;Demand&lt;/code&gt; that follows our model. In statistics this is often called &amp;ldquo;sampling from the distribution&amp;rdquo; so we will call our function &lt;code&gt;sample&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Demand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parameters&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DemandModelParameters&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weather&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Weather&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Temperature temperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weather&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Temperature
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; lambda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parameters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BaselineDemand &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
                     temperature &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parameters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TemperatureCoefficient &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                     parameters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ConditionOffsets&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;weather&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Condition&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Poisson.Sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lambda&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        Demand &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Poisson.Sample&lt;/code&gt; function returns an &lt;code&gt;int&lt;/code&gt; which isn&amp;rsquo;t what we will want for training our Machine Learning model, so we go ahead and turn it into a &lt;code&gt;float&lt;/code&gt; and attach Units of Measure. Units of Measure are incredibly valuable in tracking what numbers mean but they can add a little bit of boilerplate in some cases. I find it worth the clarity they bring.&lt;/p&gt;
&lt;p&gt;We want to add a couple more functions for generating random &lt;code&gt;Temperature&lt;/code&gt;, &lt;code&gt;Condition&lt;/code&gt; and &lt;code&gt;Weather&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private conditions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
            0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Sunny
            1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Cloudy
            2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Rainy
        &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        conditions&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Next&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Temperature minTemperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Temperature maxTemperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        rng&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NextDouble() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxTemperature &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; minTemperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; minTemperature
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Math.Round
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Temperature


&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;minTemperature&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Temperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxTemperature&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Temperature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Weather &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Condition.sample rng
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Temperature.sample rng minTemperature maxTemperature
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; condition
            Temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temperature
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, this is great. We now have a way of generating data for which we can train a ML model on. Let&amp;rsquo;s do this for Burgers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Parameters for generating samples data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burgerParameters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    BaselineDemand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 337&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;5
    TemperatureCoefficient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;5
    ConditionOffsets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Sunny&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;30&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Cloudy&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Rainy&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 30&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;123&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Number of days for which to generate data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberOfDays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 100
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; minTemp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Temperature 40&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxTemp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Temperature 110&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pastDays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;numberOfDays&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map Day

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pastWeather &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    pastDays
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; day &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; Day &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; day&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Weather &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Simulation.Weather.sample rng minTemp maxTemp &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burgerDemand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    pastWeather
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; d &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; Demand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Simulation.Demand.sample rng burgerParameters d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; DemandSimulationResult.create d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Day d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Demand &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now simulated 100 days’ worth of Burger demand based on the weather for that day. We now want to use this data to train a Machine Learning model so that we can make predictions of Demand going forward and better optimize our inventory at the beginning of the day.&lt;/p&gt;
&lt;h2 id=&#34;training-a-machine-learning-model&#34;&gt;Training a Machine Learning Model&lt;/h2&gt;
&lt;p&gt;We will use &lt;a href=&#34;https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet&#34;&gt;ML.NET&lt;/a&gt; to create a simple ML Model to predict demand. The ML.NET API can use many different data sources as inputs. For our case, we will save our historical weather and demand data to a local &lt;code&gt;.csv&lt;/code&gt; file. I am not giong to show the boilerplate for saving the data but you can find it in the &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/FoodCartSeries/FoodCart-Part3.fsx&#34;&gt;full code example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The ML.NET API has you define types for your training data that it uses for parsing the input. In our case we will have delimited records in a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;CLIMutable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemandData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;LoadColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&amp;gt;]&lt;/span&gt;
    Temperature &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;single&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;LoadColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&amp;gt;]&lt;/span&gt;
    Condition &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;LoadColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; ColumnName&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&amp;gt;]&lt;/span&gt;
    Demand &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;single&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;[&amp;lt;LoadColumn(n)&amp;gt;]&lt;/code&gt; attribute tells ML.NET which column in the source data corresponds to that field. Our saved data looks like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Temperature&lt;/th&gt;
&lt;th&gt;Condition&lt;/th&gt;
&lt;th&gt;Demand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;104&lt;/td&gt;
&lt;td&gt;Cloudy&lt;/td&gt;
&lt;td&gt;706&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;Cloudy&lt;/td&gt;
&lt;td&gt;645&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;Cloudy&lt;/td&gt;
&lt;td&gt;492&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;Sunny&lt;/td&gt;
&lt;td&gt;457&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We don&amp;rsquo;t need the data in the &lt;code&gt;Day&lt;/code&gt; column so we are ignoring it. The &lt;code&gt;[&amp;lt;ColumnName(&amp;quot;Label&amp;quot;)&amp;gt;]&lt;/code&gt; is what tells ML.NET the field that I am trying to predict. It will use the other fields as inputs to try to predict &lt;code&gt;Demand&lt;/code&gt;. We want to create a function which takes an input file, trains a model, and then saves the model locally. ML.NET allows you to save trained models as &lt;code&gt;.zip&lt;/code&gt; files. This makes it easy to load a pre-existing model to use in your code.&lt;/p&gt;
&lt;p&gt;We will be working with several different types of files and I find it useful to create some simple types to represent that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataFile &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ModelFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ModelFile &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OutputDirectory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OutputDirectory &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;DataFile&lt;/code&gt; is a filepath to the &lt;code&gt;.csv&lt;/code&gt; which holds our data. A &lt;code&gt;ModelFile&lt;/code&gt; is the &lt;code&gt;.zip&lt;/code&gt; which holds the persisted form of our ML model for predicting demand. The &lt;code&gt;OutputDirectory&lt;/code&gt; is just a directory where we want to put data and models.&lt;/p&gt;
&lt;p&gt;We can now put together a simple &lt;code&gt;train&lt;/code&gt; function which will take our input data, train an ML model, and then save it for us to use later. We will also report the metrics from the training.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Microsoft.ML
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Microsoft.ML.Data
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Types

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private reportMetrics &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;metrics&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; RegressionMetrics&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// show the metrics
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model metrics:&amp;#34;&lt;/span&gt;
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  RMSE:%f&amp;#34;&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RootMeanSquaredError
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  MSE: %f&amp;#34;&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MeanSquaredError
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  MAE: %f&amp;#34;&lt;/span&gt; metrics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MeanAbsoluteError

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; train &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OutputDirectory outputDir&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;inputFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MLContext()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; dataView &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LoadFromTextFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;DemandData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;inputFile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hasHeader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; separatorChar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; partitions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TrainTestSplit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataView&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; testFraction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        EstimatorChain()
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Categorical&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OneHotEncoding&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NormalizeMeanVariance&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Temperature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Concatenate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Features&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Temperature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Regression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Trainers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sdca()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partitions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TrainSet &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Fit
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; metrics &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partitions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestSet &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transform &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Regression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Evaluate
    reportMetrics metrics &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore

    System.IO.Directory.CreateDirectory outputDir &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; outputFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{outputDir}/%O{modelName}.zip&amp;#34;&lt;/span&gt;
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Save &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; dataView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Schema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputFile&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    ModelFile outputFile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The part where we define the shape of our model is in the definition of &lt;code&gt;pipeline&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    EstimatorChain()
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Categorical&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OneHotEncoding&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NormalizeMeanVariance&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Temperature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Concatenate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Features&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Temperature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Regression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Trainers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sdca()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We know that the &lt;code&gt;Condition&lt;/code&gt; data is categorical so we need to encode it in a way that the training code understands. &lt;a href=&#34;https://en.wikipedia.org/wiki/One-hot&#34;&gt;One-hot Encoding&lt;/a&gt; represents categories as a set of Boolean values. It&amp;rsquo;s a similar concept to binary encoding of numbers but they are not the same, so don&amp;rsquo;t mix them up!&lt;/p&gt;
&lt;p&gt;We then take the step to normalize the mean and variance of the &lt;code&gt;Temperature&lt;/code&gt; data. ML training really likes to have the data lie between -1.0 and 1.0. This protects against features appearing more important than they are. Our temperature values are between 40.0 and 110.0 which could cause a problem for the training code.&lt;/p&gt;
&lt;p&gt;We now combine our One-hot encoded &lt;code&gt;Condition&lt;/code&gt; column with the normalized &lt;code&gt;Temperature&lt;/code&gt; data using &lt;code&gt;Transforms.Concatenate&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Concatenate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Features&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Temperature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What this does is create a new column of data called &amp;ldquo;Features&amp;rdquo;. ML.NET wants there to be a &amp;ldquo;Features&amp;rdquo; column for it to use as the input to the training algorithm. &amp;ldquo;Features&amp;rdquo; is the default name for the input data of a training model. It can be configured but I am going with the default.&lt;/p&gt;
&lt;p&gt;The final part of the definition for our &lt;code&gt;pipeline&lt;/code&gt; is the type of model we want it to fit. In our case we are performing regression since we are trying to predict continuous data, &lt;code&gt;Demand&lt;/code&gt; in this case. ML.NET has a large number of possible algorithms. In our case we are using the Stochastic Dual Coordinate Ascent (SDCA) method to fit a linear model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Regression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Trainers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sdca()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now train the model using the training data set and evaluate the metrics with the test data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partitions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TrainSet &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Fit
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; metrics &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partitions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestSet &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Transform &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Regression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Evaluate
reportMetrics metrics &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run our Burger data through we will see the following metrics reported&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burgerDemandModelFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Training.train outputDirectory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BurgerDemandModel&amp;#34;&lt;/span&gt; burgerDemandDataFile

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Model metrics&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    RMSE&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;19&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;713698
    MSE&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 388&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;629880
    MAE&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 13&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;099727
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;MAE&lt;/code&gt; stands for &lt;a href=&#34;https://en.wikipedia.org/wiki/Mean_absolute_error&#34;&gt;Mean Absolute Error&lt;/a&gt;. It is the average of how far our prediction is off from the correct value. &lt;code&gt;MSE&lt;/code&gt; stands for &lt;a href=&#34;https://en.wikipedia.org/wiki/Mean_squared_error&#34;&gt;Mean Squared Error&lt;/a&gt; and is the average of the square of the error. &lt;code&gt;RMSE&lt;/code&gt; is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Root-mean-square_deviation&#34;&gt;Root Mean Square Error&lt;/a&gt; which is the square root of &lt;code&gt;MSE&lt;/code&gt;. Which one of these is the most important? It depends. When I&amp;rsquo;m working with someone, I want to understand the implications of a bad prediction. That would guide which metrics I tune for.&lt;/p&gt;
&lt;p&gt;There are many great resources out there on Machine Learning, so I will not go in depth here. For now, let&amp;rsquo;s say that our model looks good enough and see how it performs when we combine it with our Mathematical Planning model.&lt;/p&gt;
&lt;h2 id=&#34;mp--ml--&#34;&gt;MP + ML = $$$&lt;/h2&gt;
&lt;p&gt;To evaluate how our new predictor performs, we will combine it with our Mathematical Planning model. Let&amp;rsquo;s simulate 30 days into the future and compare the three approaches: Simple Heuristic, Mathematical Planning, Mathematical Planning + Machine Learning.&lt;/p&gt;
&lt;p&gt;We generate 30 days into the future. For each day we sample from the possible weather conditions. We then take the &lt;code&gt;Weather&lt;/code&gt; for each day and generate a sample of the demand for each food from our underlying statistical model. We store the result in a &lt;code&gt;Map&amp;lt;Food, Demand&amp;gt;&lt;/code&gt; to simplify some of our later code.&lt;/p&gt;
&lt;p&gt;To make our code cleaner we are going to add a new function to our &lt;code&gt;Simulation&lt;/code&gt; module for the demand for all the foods in each day.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; DayDemand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parameters&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; DemandModelParameters&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weather&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Weather&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

        parameters
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; food demandParameters &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Demand.sample rng demandParameters weather&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a small thing, but I have rarely regretted making my code clean and simple. Now we will generate 30 days’ worth of weather data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberFutureDays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 30

&lt;span style=&#34;color:#75715e&#34;&gt;// Let&amp;#39;s create some future data that we will evaluate our different techniques against
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; futureDays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;numberFutureDays&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; Day &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Day d&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Weather &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Simulation.Weather.sample rng minTemp maxTemp &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With 30 days’ worth of future weather data, we will now generate theoretical demand on those days. We are “cheating” in that we have control of the generation of demand data. In real world scenarios there are some additional complexities that need to be dealt with. My desire is to show the concepts. Future posts can deal with the idiosyncrasies. We now generate the demand that would be observed on those days.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Let&amp;#39;s create some future data that we will evaluate our different techniques against
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; futureDays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    futureWeather
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; d &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; FoodDemand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Simulation.DayDemand.sample rng foodParameters d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have a list of days where we have the weather on that day and the demand. We can now calculate what our revenue would have been using the simple heuristic from the first blog post. We create a function which takes the planned inventory and the demand on a day to calculate the revenue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; RevenueModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Types

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; evaluate &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;revenuePerServing&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; RevenuePerServing&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;inventoryPlan&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;demand&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Demand&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        inventoryPlan
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.toSeq
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; inventory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; revenuePerServing&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Sales.calculate inventory demand&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;RevenueModel.evaluate&lt;/code&gt; function calculates what the revenue would have been on a day given the inventory plan that was used and the demand that was realized. We now use our simple heuristic plan for each of the future 30 days to see what our total revenue would have been.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; simpleHueristicPlan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Map &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 900&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 466&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; simpleHeuristicRevenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    futureDays
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; RevenueModel.evaluate revenuePerServing simpleHueristicPlan d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FoodDemand&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;simpleHeuristicRevenue&lt;/code&gt; comes to $62,247.20. This will be our baseline. We now use the inventory plan we found using Mathematical Planning and find the revenue we would achieve.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; optimizedPlan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Map &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 572&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 355&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Inventory 669&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; optimizedPlanRevenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    futureDays
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; RevenueModel.evaluate revenuePerServing optimizedPlan d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FoodDemand&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;optimizedPlanRevenue&lt;/code&gt; comes to $65,462.50, a 2.58% improvement. That will add up to significant additional revenue as the business scales. We now want to bring Mathematical Planning and Machine Learning together. We will use our Machine Learning models to predict the expected demand given the weather as input. The result of the prediction will be used as the input to the Mathematical Planning model which will suggest the ideal amount of inventory to carry.&lt;/p&gt;
&lt;p&gt;I am going to gloss over some details that I will address in a future post at this point. I defined two new interfaces which cleaned up the code, &lt;code&gt;IDemandPredictor&lt;/code&gt; and &lt;code&gt;IInventoryOptimizer&lt;/code&gt;. They are simple interfaces I used to wrap the ML.NET model and the inventory optimization model. The &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/FoodCartSeries/FoodCart-Part3.fsx&#34;&gt;full example code&lt;/a&gt; shows everything but for the sake of keeping this blog post a reasonable length, I left out these nuances.&lt;/p&gt;
&lt;p&gt;In this code &lt;code&gt;burgerPredictor&lt;/code&gt;, &lt;code&gt;pizzaPredictor&lt;/code&gt; and &lt;code&gt;tacoPredictor&lt;/code&gt; are instances of &lt;code&gt;IDemandPredictor&lt;/code&gt; which wrap the ML.NET models we trained earlier. &lt;code&gt;planOptimizer&lt;/code&gt; is an &lt;code&gt;IInventoryOptimizer&lt;/code&gt; that wraps our Mathematical Planning model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; predictorPlusOptimizerRevenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    futureDays
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; d &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; DemandRates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; burgerPredictor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather
                                                        Pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pizzaPredictor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather
                                                        Taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; tacoPredictor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Weather
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{|&lt;/span&gt; d &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; Plan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; planOptimizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plan d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DemandRates &lt;span style=&#34;color:#f92672&#34;&gt;|})&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; RevenueModel.evaluate revenuePerServing d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Plan d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FoodDemand&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;predictorPlusOptimizerRevenue&lt;/code&gt; comes to $67,214.30, a 7.98% improvement from our baseline. Here are the results side by side:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;Simple Heuristic&lt;/th&gt;
&lt;th&gt;MP&lt;/th&gt;
&lt;th&gt;MP + ML&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Revenue&lt;/td&gt;
&lt;td&gt;$62,247.20&lt;/td&gt;
&lt;td&gt;$65,462.50&lt;/td&gt;
&lt;td&gt;$67,214.30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;% Improvement&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2.58%&lt;/td&gt;
&lt;td&gt;7.98%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I hope this illustrates a simple use case for combining the power of Mathematical Planning and Machine Learning. The techniques are highly complementary and lead to highly effective solutions which are far better than either technique in isolation. We can improve this solution in many ways. We spent no time on tuning the Machine Learning model. It would be nice to have real world data for this problem. The challenges is that the real world data sets I have access to are proprietary which is why I generated my own.&lt;/p&gt;
&lt;p&gt;In future posts I hope to explore how to tune Machine Learning models to protect against specific failure modes by tuning for different metrics. We are also assuming that we restock the food cart every morning. We likely need to make inventory decisions several days ahead of time which introduces some interesting optimization challenges we will explore in the future.&lt;/p&gt;
&lt;p&gt;Let me know if there are any problems you would like me to explore!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Maximizing Profitability of Inventory with Mathematical Planning and Machine Learning in F# - Part 2</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-21/</link>
<pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-21/</guid>
<description>&lt;p&gt;In a &lt;a href=&#34;https://matthewcrews.com/blog/2020/12/2020-12-14/&#34;&gt;previous post&lt;/a&gt; we discussed the problem of stocking our food cart to maximize our profitability. We created a simple heuristic and then performed simulations to evaluate the expected profitability. We discussed that knowing the expected profitability was not enough, we calculated Confidence Intervals to understand the where the true expected profitability lies. This week we want to find a better plan for packing the food cart. We will use Mathematical Planning to find an answer which maximize the expected profitability which outperforms the heuristic used in the first post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To see all the code for this post, go &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/ModelMonday/2020-12-14-FoodCartSeries/2020-12-17-Part2.fs&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-probability-of-selling&#34;&gt;The Probability of Selling&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Math Warning:&lt;/strong&gt; I like to explain the math behind how we calculate the probablility of us selling items. If you would like to skip the math, feel free to jump to the next &lt;a href=&#34;https://matthewcrews.com/blog/2020/12/2020-12-21/#applying-to-food-cart-problem&#34;&gt;section&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a nuance to this problem that the heuristic from the previous post did not take into consideration. We know that the number of sales of a food can be modeled by a &lt;a href=&#34;https://en.wikipedia.org/wiki/Poisson_distribution&#34;&gt;Poisson Distribution&lt;/a&gt;. The Poisson Distribution takes a single parameter, $\lambda$, which is the average arrival rate of a process. In our case, the &amp;ldquo;process&amp;rdquo; is people placing orders for a given food. Our historical data shows that the average daily demand for food is 600 burgers, 900 pizzas, and 700 tacos.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Burger&lt;/th&gt;
&lt;th&gt;Pizza&lt;/th&gt;
&lt;th&gt;Taco&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Average Demand&lt;/td&gt;
&lt;td&gt;$600.0 \frac{\text{item}}{\text{day}}$&lt;/td&gt;
&lt;td&gt;$900.0 \frac{\text{item}}{\text{day}}$&lt;/td&gt;
&lt;td&gt;$700.0 \frac{\text{item}}{\text{day}}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Why do we care about this? Why do we care that the demand is actually a Poisson Distribution? Let&amp;rsquo;s perform a thought experiment. What are the odds that we sell at least 1 pizza in a day? Essentially 100%, right? What about 2 pizzas? Still 100% but maybe infinitesimally smaller. What are the odds of us selling 900 pizzas? Well, ~50% because historically we have seen that is the average demand. On rare days we will only sell 800 pizzas and on some we may sell over 1,000 if we do not run out of inventory. We can use the Poisson Distribution to calculate the odds of us selling a particular number of pizzas on any given day. Before we go any farther, lets plot the distribution of pizza demand between 800 and 1,000.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2020-12-21-demand-distribution.png&#34; alt=&#34;Pizza Demand Distribution&#34;&gt;&lt;/p&gt;
&lt;p&gt;You notice that the peak is at 900 which is what we expect since that is the average. Visually we can tell that the probability of demand being between 850 and 950 is high but drops off rapidly at the tails.&lt;/p&gt;
&lt;p&gt;We need to figure out how to use this information to help us find the ideal number of each food we should pack. What would be really useful is being able to calculate what the probability is of us completely selling our inventory. If we pack 950 pizzas, how likely are we to sell through all of them? We would rather not waste space on foods that are not going to sell. We need a function which allows us to calculate the probability of demand exceeding some value of $x$. In math terms we would write:&lt;/p&gt;
&lt;p&gt;$$
P(demand &amp;gt; x)
$$&lt;/p&gt;
&lt;p&gt;One the ingredients for this calculation is called the Cumulative Distribution Function (CDF). The CDF for the Poisson Distribution is:&lt;/p&gt;
&lt;p&gt;$$
\text{CDF}(x) = P(X \le x) = \frac{\Gamma(x + 1,\  \lambda)}{\lfloor x \rfloor !} \qquad \qquad x = 0,1,2 , \ldots
$$&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s some scary looking math so let&amp;rsquo;s unpack what this means. The function $F(x)$ calculates the probability of a random observation from our Poisson Distribution being less than or equal to the value of $x$. In our case, $x$ is the number of servings we pack of a food.&lt;/p&gt;
&lt;p&gt;The CDF isn&amp;rsquo;t quite what we need. What we want is to know the probability of demand &lt;strong&gt;exceeding&lt;/strong&gt; $x$, not being less or equal to $x$. It is pretty simple to adjust the formula though. The probability of demand being greater than $x$ is equal to 1.0 minus the probability of demand being less than $x$&lt;/p&gt;
&lt;p&gt;$$
P(demand &amp;gt; x) = 1 - P(demand \leq x)
$$&lt;/p&gt;
&lt;p&gt;We can swap in our CDF for the Poisson distribution to get a new formula which allows us to calculate the demand exceeding $x$.&lt;/p&gt;
&lt;p&gt;$$
P(demand &amp;gt; x) = 1 - \frac{\Gamma(x + 1,\  \lambda)}{\lfloor x \rfloor !}
$$&lt;/p&gt;
&lt;p&gt;Fortunately, the &lt;code&gt;MathNET&lt;/code&gt; library includes a function for calculating these values so we will not need to worry about implementing them.&lt;/p&gt;
&lt;h2 id=&#34;applying-to-food-cart-problem&#34;&gt;Applying to Food Cart Problem&lt;/h2&gt;
&lt;p&gt;How do we apply this to the food cart problem? Let&amp;rsquo;s say we want to know the odds of us being able to sell at least 800 pizzas. We can plug the value into the function, and we get a probability of 99.963% chance of demand exceeding 800. We can also put 1,000 in and find that there is only a 0.049% chance of demand for pizza being that high.&lt;/p&gt;
&lt;p&gt;We will use this in our objective function. We want to maximize the expected revenue so we will weight the revenue we receive for an item by the probability that we actually sell it. This means that the revenue we receive for the $n^\text{th}$ item of a given food will be multiplied by the probability that demand meets are exceeds that amount. This gives us the following formula for expected revenue.&lt;/p&gt;
&lt;p&gt;$$
\text{Expected Revenue} = \sum_{f \in food}\sum_{n} P(\text{demand} \ge n) * \text{Revenue}_{f}
$$&lt;/p&gt;
&lt;p&gt;We are using the same domain as in the previous post and we will be extending it. Let&amp;rsquo;s write a function which will gives us the probabilities of selling the $n^\text{th}$ number of a food. To keep track of the $n^\text{th}$ item we are going to add a new type to our domain.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NthItem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NthItem &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we create the function which calculates the probabilites for a given food for 1 item up to some max number of items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; createIncrementProbability
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;foodDemands&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; seq&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DemandRate&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxItems&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    seq &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; DemandRate demandRate&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; foodDemands &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;maxItems &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; probability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Poisson.CDF &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;demandRate &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; NthItem i&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; probability
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;createIncrementProbability&lt;/code&gt; function takes in a sequence of &lt;code&gt;Food * DemandRate&lt;/code&gt; tuples for which we will generate probabilities. &lt;code&gt;Food&lt;/code&gt; is a type we are using to represent burger, pizza, or taco. The &lt;code&gt;DemandRate&lt;/code&gt; type represents the average daily demand for a food.&lt;/p&gt;
&lt;p&gt;For each food, we calculate the probability of demand meeting or exceeding the values from 1 to &lt;code&gt;maxItems&lt;/code&gt;. &lt;code&gt;maxItems&lt;/code&gt; is the maximum quantity of a given food we would consider packing into our food cart. We store this data in a &lt;code&gt;SMap2&lt;/code&gt; for ease use in our model formulation.&lt;/p&gt;
&lt;p&gt;We now create a function for building a model for our problem. Let&amp;rsquo;s call it &lt;code&gt;create&lt;/code&gt; and have it take all the arguments we will need for our model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; create 
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;revenue&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;storage&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weight&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;incrementProbability&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; NthItem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;packDecision&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; NthItem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Decision&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxStorage&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxWeight&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxFridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Parameter Definitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;revenue&lt;/code&gt; is the amount of money we make when selling a particular &lt;code&gt;Food&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage&lt;/code&gt; is the amount of pantry space required to pack a single serving&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fridgeSpace&lt;/code&gt; is the amount of fridge space required to for a single serving&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt; is the weight for a single serving of a food&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incrementProbability&lt;/code&gt; is the probability of selling a particular quantity of a &lt;code&gt;Food&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packDecision&lt;/code&gt; is a 2-dimensional SliceMap indexed by &lt;code&gt;Food&lt;/code&gt; and &lt;code&gt;NthItem&lt;/code&gt;. &lt;code&gt;Food&lt;/code&gt; will correspond to burger, pizza, or taco. &lt;code&gt;NthItem&lt;/code&gt; is the index of particular food within the group. The $1^\text{st}$ pizza, the $2^\text{nd}$ pizza, the $3^\text{rd}$ pizza etc. The value stored in the SliceMap is a &lt;code&gt;Boolean&lt;/code&gt; decision variable where 1 indicates that you should pack the food and 0 indicates that you should not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxStorage&lt;/code&gt; is the maximum amount of storage space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxweight&lt;/code&gt; is the maxumum amount of weight that can be packed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxFridgeSpace&lt;/code&gt; is the maximum amount of refrigerated storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here creating our model is straightforward. We need to create a constraints for the available storage, weight, and fridge space. We take advantage of the &lt;code&gt;sum&lt;/code&gt; function and &lt;a href=&#34;https://en.wikipedia.org/wiki/Hadamard_product_(matrices)&#34;&gt;Hadamard Product&lt;/a&gt; operator, &lt;code&gt;.*&lt;/code&gt;, included in the &lt;code&gt;SliceMap&lt;/code&gt; library to make the notation simple. The Hadamard Product is taking care of the joining of the data before multiplying the values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; weightConstraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxWeight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; packDecision&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; maxWeight&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; storageConstraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxStorage&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;storage &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; packDecision&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; maxStorage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fridgeSpaceConstraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxFridgeSpace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fridgeSpace &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; packDecision&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; maxFridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our objective function is the revenue adjusted for the probability of selling the number of items. We then use this expression to create an objective.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; revenueExpectation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;revenue &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; incrementProbability &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; packDecision&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxRevenueExpectation&amp;#34;&lt;/span&gt; Maximize revenueExpectation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We bring all this together and create a model which is what the &lt;code&gt;create&lt;/code&gt; function returns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;Model.create objective
&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint weightConstraint
&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint storageConstraint
&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint fridgeSpaceConstraint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can calculate our probabilities, create decision variables, and use these functions to build the model and solve it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; incrementProbabilities &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PlanningModel.createIncrementProbability demandRates maxItems

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; packDecisions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pack&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; food &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; foods &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; increment &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;([&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;maxItems&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map DemandLevel&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                Boolean
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; planModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PlanningModel.create revenue storage fridgeSpace weight incrementProbabilities packDecisions maxStorage maxWeight maxFridge

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve Settings.basic planModel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s compare the plan from the Heuristic in the last post to what the Optimization is recommending.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Burgers&lt;/th&gt;
&lt;th&gt;Pizza&lt;/th&gt;
&lt;th&gt;Taco&lt;/th&gt;
&lt;th&gt;Storage Usage&lt;/th&gt;
&lt;th&gt;Fridge Usage&lt;/th&gt;
&lt;th&gt;Weight Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Heuristic&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;466&lt;/td&gt;
&lt;td&gt;40.93%&lt;/td&gt;
&lt;td&gt;62.10%&lt;/td&gt;
&lt;td&gt;99.96%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Optimization&lt;/td&gt;
&lt;td&gt;572&lt;/td&gt;
&lt;td&gt;355&lt;/td&gt;
&lt;td&gt;669&lt;/td&gt;
&lt;td&gt;42.43%&lt;/td&gt;
&lt;td&gt;70.86%&lt;/td&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is quite a different plan than what we saw before. The real test will come from performing the simulations with both plans and seeing which one ends up with a better expected revenue and tighter standard deviation. We perform 1M simulations of both plans and see the following.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;Heuristic&lt;/th&gt;
&lt;th&gt;Optimization&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Revenue Mean ± (99% CI)&lt;/td&gt;
&lt;td&gt;2073.25 ± 0.07&lt;/td&gt;
&lt;td&gt;2244.10 ± 0.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Revenue Variance&lt;/td&gt;
&lt;td&gt;776.27&lt;/td&gt;
&lt;td&gt;110.34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Revenue StdDev&lt;/td&gt;
&lt;td&gt;27.86&lt;/td&gt;
&lt;td&gt;10.50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The plan found by the optimization is providing an additional $171 in revenue but also has a lower Standard Deviation which means the revenue is more reliable. This is a fantastic result and shows how taking the randomness into account can yield superior results.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This post showed that even a simple mathematical planning model can yield significant improvements over simple heuristics for decision making. By taking the variability of demand into account we were able to realize a higher average revenue but also a more reliable amount of revenue.&lt;/p&gt;
&lt;p&gt;In the next post we will introduce a simple Machine Learning model to make predictions about demand in the future. So far, we have only used the historical average of demand to create our plan. What if we took that data and instead created a model for predicting demand and then fed that into our Mathematical Planning model?&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Maximizing Profitability of Inventory with Mathematical Planning and Machine Learning in F# - Part 1</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-14/</link>
<pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-14/</guid>
<description>&lt;p&gt;One of the questions that I love to answer is, &amp;ldquo;What is the difference between Mathematical Planning and Machine Learning?&amp;rdquo; This is an excellent question. The fields are close to one another and solutions often involve both techniques. The way I differentiate is based on what question they are meant to answer. Mathematical Planning is primarily concerned with answering the question, &amp;ldquo;What should we do?&amp;rdquo; Machine Learning answers the question, &amp;ldquo;What is most likely?&amp;rdquo; We often ask these questions at the same time which is why the techniques can become conflated.&lt;/p&gt;
&lt;p&gt;I want to provide an example of a real-world problem that involves the marriage of these two techniques. Due to the amount of material to cover, I decided to break it into several posts. This first post will setup the problem, the Food Cart Packing Problem, and go over the tools we will use to evaluate the quality of different strategies. In the next post we will formulate a Mathematical Planning model to find a better strategy than the simple heuristic with start within this post. Finally, we will implement a Machine Learning model to make predictions on demand trends and feed that into the Mathematical Planning model for even more profitable strategies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To see all the code for this post, go &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/ModelMonday/2020-12-14-FoodCartSeries/2020-12-14-Part1.fs&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-food-cart-problem&#34;&gt;The Food Cart Problem&lt;/h2&gt;
&lt;p&gt;An example problem that I frequently use is the Food Cart Problem. It is easy for people to conceptualize so we can focus on the techniques. We are running a Food Cart and we want to know what items to pack at the beginning of the day to maximize our revenue. In this case we sell Burgers, Pizza, and Tacos (it&amp;rsquo;s an eclectic food cart). Each food takes up a certain amount of pantry space, fridge space, and weight. Our food cart has recently been downsized so we must be purposeful about what we pack. We have kept track of how much we sell each day when we didn&amp;rsquo;t use to run out of inventory.&lt;/p&gt;
&lt;p&gt;We decide to start with a simple heuristic. On average, we sell 600 Burgers per day, 900 pizzas, and 700 tacos when we excess inventory. Due to the downsize we are more restricted on space. We only have $3.0 m^3$ of storage, $2.0 m^3$ of fridge space, and can only carry $1,000 kg$ of weight. We have our same parking spot, so we expect to see the same demand.&lt;/p&gt;
&lt;p&gt;Below is a breakdown of the space and weight requirements per serving of the food we provide.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Burger&lt;/th&gt;
&lt;th&gt;Pizza&lt;/th&gt;
&lt;th&gt;Taco&lt;/th&gt;
&lt;th&gt;Available&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Storage Space&lt;/td&gt;
&lt;td&gt;$700.0 cm^3$&lt;/td&gt;
&lt;td&gt;$950.0 cm^3$&lt;/td&gt;
&lt;td&gt;$800.0 cm^3$&lt;/td&gt;
&lt;td&gt;$3.0 m^3$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fridge Space&lt;/td&gt;
&lt;td&gt;$900.0 cm^3$&lt;/td&gt;
&lt;td&gt;$940.0 cm^3$&lt;/td&gt;
&lt;td&gt;$850.0 cm^3$&lt;/td&gt;
&lt;td&gt;$2.0 m^3$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Weight Capacity&lt;/td&gt;
&lt;td&gt;$550.0 gm$&lt;/td&gt;
&lt;td&gt;$800.0 gm$&lt;/td&gt;
&lt;td&gt;$600.0 gm$&lt;/td&gt;
&lt;td&gt;$1,000 kg$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;a-simple-heuristic&#34;&gt;A Simple Heuristic&lt;/h2&gt;
&lt;p&gt;We decide to prioritize pizza because it makes the most money, then tacos, then burgers. We pack for 900 pizza orders because that&amp;rsquo;s the average demand. With the remaining space, we pack tacos until we meet the average daily demand. If there is any room leftover, we will pack some burgers. Given the dimensions of our food, the result comes to 900 pizzas, 466 tacos, and 0 burgers. This makes sense to us since we have much less space than we did before, and we thought we may have to drop a food item from the menu. If we run the numbers, we expect to make $2,668.50 per day&amp;hellip; or do we?&lt;/p&gt;
&lt;p&gt;The important nuance to this problem is that this plan was made using the average demand. Half of the time the demand is higher, half of the time the demand is lower. On days where the demand for pizza is greater than 900, we would not be able to capture that additional revenue anymore because we do not have enough inventory. At the same time, when the demand for pizza is below 900, we lose out on the possibility we could have sold more of other foods had they been in stock. We would like to get some idea of what the actual revenue value we should expect. Fortunately there is a tool for this, &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_method&#34;&gt;Monte Carlo Simulation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;monte-carlo-simulation&#34;&gt;Monte Carlo Simulation&lt;/h2&gt;
&lt;p&gt;Monte Carlo simulation is conceptually simple, you can get an idea for the shape of a distribution (in our case expected revenue) by sampling from it many times and then computing descriptive statistics. Our hope is to find what the average revenue is expected to be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I encourage people to read up on Monte Carlo. I do not have the space here to provide an exhaustive explanation. To my Statistician readers, I know I am glossing over details. I am trying to provide an engaging example without intimidating readers with mathematical rigor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, if you can remember your course on probability distributions, you may remember that the arrival rate of customers can be modeled by a &lt;a href=&#34;https://en.wikipedia.org/wiki/Poisson_distribution&#34;&gt;Poisson Distribution&lt;/a&gt;. We will assume that this is a valid distribution to model the demand that we see at our food cart. Part of what makes this distribution easy to work with is that it takes a single parameter, $\lambda$. The $\lambda$ is easy to calculate, it is the mean of the data. Therefore, we say that pizza demand is a Poisson distribution with a $\lambda$ of 900.0 or in math notation:&lt;/p&gt;
&lt;p&gt;$$\text{PizzaDemand} \sim Poisson(\lambda = 900 )$$&lt;/p&gt;
&lt;p&gt;$\lambda$ can be thought of as the average rate of arrivals or in our case the overage number of orders in a day for a given food.&lt;/p&gt;
&lt;p&gt;Now we need to do some domain modeling and setup our little simulation. We will start with some types to describe our domain.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Food&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Food &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Lambda&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Lambda &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Food&lt;/code&gt; type differentiates between which food item we are referring to. The &lt;code&gt;Lambda&lt;/code&gt; is the average demand we have observed and is the input for our Poisson distributions. We will use Units of Measure to track the units in our calculations. This will protect us from making silly conversion errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;USD&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cm&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gm&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;serving&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;USD&lt;/code&gt; stands for United States Dollars. &lt;code&gt;cm&lt;/code&gt; and &lt;code&gt;gm&lt;/code&gt; are the SI units for volume and mass. The &lt;code&gt;serving&lt;/code&gt; measure is for the quantity of servings we are packing. We will be using the &lt;code&gt;Math.NET&lt;/code&gt; library for performing calculations with distributions. We need a function for taking a plan and generating a random outcome for our revenue model. We will call this function many, many times to get an idea of the distribution of revenue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sample 
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;foodDemands&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; seq&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Lambda&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;revenue&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; evaluteSoldQuantity planAmount &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Lambda lambda&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Generate a random sample from the Poisson distribution and take the lesser
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// of the planned inventory or of the random Demand value that was generated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; actualQuantity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.Min &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; planAmount&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Sample.poisson lambda rng &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Multiply by 1.0&amp;lt;serving&amp;gt; to get the correct units on the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        actualQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    foodDemands
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; demandRate&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;evaluteSoldQuantity plan&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; demandRate rng&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.sumBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; soldQuantity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; soldQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; revenue&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;food&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What &lt;code&gt;sample&lt;/code&gt; does is take the plan and perform a single simulation. It generates a random demand value for the given food and compares that to what we planned to have in inventory. It takes the lesser of our planned quantity or the random demand that was generated which becomes the actual amount sold. It takes the quantity of each food that was sold and multiplies it by the revenue of the food. It sums this across all the foods which gives us our revenue for that single simulation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sample&lt;/code&gt; performs a single simulation. We need to run many to calculate statistics on the results. We create an &lt;code&gt;evaluate&lt;/code&gt; function which will call the &lt;code&gt;sample&lt;/code&gt; function many times and gather the results. &lt;code&gt;evaluate&lt;/code&gt; then computes the descriptive statistics and the revenues that were generated in our simulations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; evalute 
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;foodDemands&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; seq&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DemandRate&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;revenue&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Food&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rng&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; System.Random&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;numberSamples&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; samples &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        seq &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;numberSamples &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                sample foodDemands revenue plan rng
                &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.ofSeq

    DescriptiveStatistics samples
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We provide an argument to &lt;code&gt;evaluate&lt;/code&gt; called &lt;code&gt;numberSamples&lt;/code&gt; which controls the number of simulations that we perform. &lt;code&gt;DescriptiveStatistics&lt;/code&gt; from &lt;code&gt;Math.NET&lt;/code&gt; allows us to compute the descriptive statistics. This provides us with the sample mean, variance, and standard deviation.&lt;/p&gt;
&lt;h2 id=&#34;evaluating-our-simple-heuristic&#34;&gt;Evaluating Our Simple Heuristic&lt;/h2&gt;
&lt;p&gt;Now that we have the ability to simulate the effects of different plans on our revenue, let’s see how well our simple heuristic does. First, we define the data for the parameters of our model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Food &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Burger&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pizza &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Food &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pizza&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; taco &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Food &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Taco&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; foods &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger
        pizza
        taco
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; revenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; storage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 700&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  950&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   800&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fridgeSpace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 900&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  940&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   850&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 550&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  800&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   600&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; demandRates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; DemandRate 600&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  DemandRate 900&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   DemandRate 700&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1_000
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxWeight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1_000_000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;gm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxStorage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3_000_000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxFridge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2_000_000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then define some functions which implement our simple heuristic for prioritizing pizza, then tacos, then burgers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A function to call Math.Floor on floats with Units of Measure
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; floor &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Math.Floor &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; FSharp.Core.LanguagePrimitives.FloatWithMeasure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// A function to call Math.Min on floats with Units of Measure
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; min &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Math.Min &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; FSharp.Core.LanguagePrimitives.FloatWithMeasure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;// We packe the average daily demand of pizzas
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 900&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tacoQuantity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// The number of possible tacos based on space
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tacosBasedOnSpace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        List.min &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxStorage &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; storage&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; storage&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxFridge &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxWeight &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; weight&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; weight&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; floor
    &lt;span style=&#34;color:#75715e&#34;&gt;// The min of taco demand and the space available
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    min &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;700&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; tacosBasedOnSpace&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burgerQuantity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// The number of possible burgers based on space
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; burgersBasedOnSpace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        List.min &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxStorage &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; storage&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tacoQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; storage&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; storage&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxFridge &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tacoQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; fridgeSpace&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;maxWeight &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pizzaQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; weight&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;pizza&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tacoQuantity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; weight&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; weight&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;taco&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; floor
    &lt;span style=&#34;color:#75715e&#34;&gt;// The min of burgers demand and the space available
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    min &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;600&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serving&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; burgersBasedOnSpace&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; plan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        burger&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; burgerQuantity
        pizza&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pizzaQuantity
        taco&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; tacoQuantity
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s analyze the result of performing 100 simulations and analyze the distribution of the revenue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.Random ()
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; stats_100Runs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Simulation.evalute demandRates revenue plan rng 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like to print things out in tables, and I am loving the &lt;code&gt;Spectre.Console&lt;/code&gt; &lt;a href=&#34;https://github.com/spectresystems/spectre.console&#34;&gt;project&lt;/a&gt;. Here is a table with the results of our simulations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──────────────┬─────────┬──────────┬────────┐
│ NumberOfRuns │ Mean    │ Variance │ StdDev │
├──────────────┼─────────┼──────────┼────────┤
│ 100          │ 2075.50 │ 605.37   │ 24.60  │
└──────────────┴─────────┴──────────┴────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to ask a critical question, &amp;ldquo;How confident are we in the answer?&amp;rdquo; Our initial run shows that on average, we appear to make $2,075.50. What happens if we run this experiment again?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──────────────┬─────────┬──────────┬────────┐
│ NumberOfRuns │ Mean    │ Variance │ StdDev │
├──────────────┼─────────┼──────────┼────────┤
│ 100          │ 2071.54 │ 926.30   │ 30.44  │
└──────────────┴─────────┴──────────┴────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We get a slightly different answer, \$2,071.54. Well, this is interesting. Our numbers are making sense based on our earlier thought experiment. We are no longer carrying extra inventory, so we do not benefit from days where demand is exceptionally high. We would have to have excessive demand for pizza and tacos to sell everything and achieve a revenue of \$2,668.50.&lt;/p&gt;
&lt;p&gt;What we need to focus on answering now is how well do we know the Mean, the expected revenue. Fortunately, there is a useful statistical tool called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Confidence_interval&#34;&gt;Confidence Interval&lt;/a&gt;. It allows us to put bounds on where we think the true expected revenue is. The formula for the Confidence Interval is:&lt;/p&gt;
&lt;p&gt;$$
CI = \bar{x} \pm z \frac{s}{\sqrt{n}}
$$&lt;/p&gt;
&lt;p&gt;The Confidence Interval ($CI$) is defined as a lower and upper bound. $\bar{x}$ is the average of the data, $s$ is the standard deviation, and $n$ is the number of samples that were taken. $z$ is a parameter you choose based on how confident you want to be that the true mean of the distribution is between the lower and upper bound. If we want to be 95% confident that the true average revenue is between the lower and upper bound, we will use a $z$ of 1.960. If we wanted to be 99% percent sure, we would use a $z$ of 2.567. If you would like to know where the values of $z$ are coming from, look up the t-distribution and t-distribution Confidence Intervals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For my stats friends. I am assuming that the error is normally distributed and has a mean of 0. Normally I would plot this to verify but the blog series is already turning into 3 posts, so I have to cut some details somewhere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s add the confidence interval for 95% and 99% to our output table and see what we get.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──────────────┬─────────┬──────────┬────────┬──────────────────┬──────────────────┐
│ NumberOfRuns │ Mean    │ Variance │ StdDev │ 95% CI           │ 99% CI           │
├──────────────┼─────────┼──────────┼────────┼──────────────────┼──────────────────┤
│ 100          │ 2064.35 │ 997.13   │ 31.58  │ 2058.16, 2070.54 │ 2056.25, 2072.46 │
└──────────────┴─────────┴──────────┴────────┴──────────────────┴──────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives us a much clearer understanding of what we can expect out of our revenue. This is how we should interpret these Confidence Intervals. There is a 95% probability that the true average revenue is between 2058.16 and 2070.54. There is a 99% probability that the true average revenue is between 2056.25 and 2072.46. Notice that the bounds of the 99% CI are wider than the 95% CI. The more confident we want to be that we have captured the true average revenue, the wider we must make the bounds.&lt;/p&gt;
&lt;p&gt;The average revenue of 2064.35 we observed in this most recent run is only the average of the data we simulated. It is more valuable to understand where the true revenue average actually is. Let&amp;rsquo;s increase the number of simulations that we perform and see how that affects the Confidence Intervals.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌──────────────┬─────────┬──────────┬────────┬──────────────────┬──────────────────┐
│ NumberOfRuns │ Mean    │ Variance │ StdDev │ 95% CI           │ 99% CI           │
├──────────────┼─────────┼──────────┼────────┼──────────────────┼──────────────────┤
│ 100          │ 2073.74 │ 735.74   │ 27.12  │ 2068.43, 2079.06 │ 2066.78, 2080.71 │
│ 1,000        │ 2071.96 │ 895.10   │ 29.92  │ 2070.11, 2073.81 │ 2069.53, 2074.39 │
│ 10,000       │ 2073.31 │ 776.40   │ 27.86  │ 2072.77, 2073.86 │ 2072.60, 2074.03 │
│ 100,000      │ 2073.34 │ 773.98   │ 27.82  │ 2073.16, 2073.51 │ 2073.11, 2073.56 │
│ 1,000,000    │ 2073.20 │ 778.17   │ 27.90  │ 2073.14, 2073.25 │ 2073.13, 2073.27 │
└──────────────┴─────────┴──────────┴────────┴──────────────────┴──────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that the mean, variance, and standard deviation are not changing significantly as we increase the number of simulations. What we do see though is that the Confidence Intervals are getting tighter. This is because as we gather more data, we become more confident of where the true average revenue is. We can see that by the time we get to 1,000,000 samples the CI for 95% is only 0.011 wide.&lt;/p&gt;
&lt;p&gt;Our model for revenue does not have many random variables so it shouldn&amp;rsquo;t surprise us that it is easy to get a tight bound on the CIs. As models becomes larger with more random variables though, the number of iterations to achieve tight bound goes up significantly. There is a cost trade off. The tighter you want the bounds, the more computational effort that is required.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered quite a bit of ground in this post. We have introduced a new problem, the Food Cart Problem. We formulated a simple simulation which allows us to perform some statistical experiments to understand how good our simple heuristic is for packing the Food Cart. We also introduced the idea of a Confidence Interval for understanding how good our estimates are. Next time we will show how to use Mathematical Planning to find a better plan for packing the Food Cart that achieves a higher expected revenue which is also more reliable.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Why I Love F# for Mathematical Planning</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-09/</link>
<pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-09/</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antoine de Saint-Exupery&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;On my journey of growing as a developer, I am consistently inspired by language features which seem incredibly simple but yield remarkable benefit. As I try to master F#, I am frequently surprised by how powerful the language is for expressing ideas while having so few features. Discussions frequently pop up about the need for ever more powerful abstractions, yet I find myself amazed by how far you can take the language with what is already there.&lt;/p&gt;
&lt;p&gt;I am no programming language expert, but I admire languages that maintain a lean feature set. Every new feature added to a language makes it just a little bit more difficult to fully understand and a little more intimidating for new developers. It is an impressive design feat when a language can remain approachable for beginners but enable the flexibility that library authors need.&lt;/p&gt;
&lt;p&gt;I am an Industrial Engineering turned Machine Learning Engineer, and I focus on the problem of maximizing the profitability and efficiency of companies. Often the solution involves a Mathematical Planning Model (aka Mathematical Programming). What I hope to do in the next few paragraphs is illustrate to you how some of the most basic features of F#, Discriminated Unions and Units of Measure, eliminate the most pernicious bugs when developing these models.&lt;/p&gt;
&lt;h2 id=&#34;the-domain-of-mathematical-planning&#34;&gt;The Domain of Mathematical Planning&lt;/h2&gt;
&lt;p&gt;The domain of Mathematical Planning is made up of Decisions, Constraints, and Objectives. A Decision is a choice that a business needs to make. It can be how many of Item X do we buy, do we build in Location A or Location B, or how many people do we assign to each job. Constraints are the rules we need to abide by. They are the limitations on what is possible. A Constraint could be that we only have 10 people available, or we can only build in Seattle or Portland, or we only have $1,000,000 to invest. The Objective is how we measure success. It is the function we want to maximize or minimize. We could minimize waste, maximize profit, or minimize cost.&lt;/p&gt;
&lt;p&gt;Many of my colleagues are building their models with Python. Python is a great language and I have been productive with it in the past. Here is a snippet of what a mathematical planning model may look like in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Define a list of items to optimize for&lt;/span&gt;
items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# Define a list of locations to assign items to&lt;/span&gt;
locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portland&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seattle&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Detroit&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# Define a dictionary of revenue associated with each item and location tuple&lt;/span&gt;
revenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portland&amp;#34;&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;;, (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seattle&amp;#34;&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;1.7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }

&lt;span style=&#34;color:#75715e&#34;&gt;# Define a dictionary with the availability of each item&lt;/span&gt;
availability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20.0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14.0&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a Decision for each Item, Location combination. This will be how much&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# of a given item we decide to send to that location&lt;/span&gt;
allocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LpVariable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dicts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AmountSent&amp;#34;&lt;/span&gt;,(items,locations), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Create an instance of a `Problem` object and state that we want to maximize&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the objective we give it&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LpProblem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ItemAllocation&amp;#34;&lt;/span&gt;, LpMaximize)

&lt;span style=&#34;color:#75715e&#34;&gt;# We create an expression which evaluates the total revenue&lt;/span&gt;
revenue_expr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    lpSum([revenue[i][l] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; allocation[i][l] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; locations])

&lt;span style=&#34;color:#75715e&#34;&gt;# We set the Objective of the Problem by adding it&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; revenue_expr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaximizeRevenue&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# For each item in items, create a constraint which states that the total number&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# of items that is allocated cannot exceed the availability of the item&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items:
    problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; lpSum([allocation[l][i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; location] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; availability[i])

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the beginning of a straightforward assignment problem. We have a list of items, &lt;code&gt;items&lt;/code&gt;. For each &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;items&lt;/code&gt;, we must decide how many we send to each &lt;code&gt;location&lt;/code&gt; in &lt;code&gt;locations&lt;/code&gt;. There is a limit on how much of each &lt;code&gt;item&lt;/code&gt; is available for us to send. There is a revenue associated with sending a particular &lt;code&gt;item&lt;/code&gt; to a given &lt;code&gt;location&lt;/code&gt;. In this problem we want to maximize our revenue which is calculated by multiplying the &lt;code&gt;decision&lt;/code&gt; for a given &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; by the &lt;code&gt;revenue&lt;/code&gt; associated with it. Finally, we create a constraint for each &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;items&lt;/code&gt; which states that the total number of a given &lt;code&gt;item&lt;/code&gt; that is allocated cannot exceed the total that is available.&lt;/p&gt;
&lt;p&gt;This is only part of the problem. Normally there would be more constraints that would make it more interesting. This is enough of a problem to illustrate my case though. There are two errors in this model already. If you were paying close attention you may have found one. I promise you cannot detect the second.&lt;/p&gt;
&lt;h2 id=&#34;the-power-of-domain-modeling-using-discriminated-unions&#34;&gt;The Power of Domain Modeling Using Discriminated Unions&lt;/h2&gt;
&lt;p&gt;F# provides two simple but powerful features which help ensure against the errors in the Python code. The first is Discriminated Unions. If we were to reformulate this problem using F#, the first thing we would do was define some simple types to model our domain.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Item &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Location &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of just using strings to describe our Items and Locations, we create simple, single case Discriminated Unions (DU). These DUs provide context around what the strings are meant to represent. Let&amp;rsquo;s go ahead and create our &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;locations&lt;/code&gt; lists again. This time, wrapping them in DUs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map Item

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portland&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seattle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Detroit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map Location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will also update our &lt;code&gt;availability&lt;/code&gt; information to use these new types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; availability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 14&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will create the Decisions for each &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt;. We store these &lt;code&gt;Decision&lt;/code&gt; types in a &lt;code&gt;Map&lt;/code&gt; which is indexed by an &lt;code&gt;(Item * Location)&lt;/code&gt; tuple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; allocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AmountSent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; items &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                Continuous &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; infinity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now attempt to create the same constraints we did in Python with a direct translation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; allocationContraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ItemLimit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; items &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            List.sum &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; allocation&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; availability&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Except, the compiler is gives us an error on the indexing of &lt;code&gt;allocation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2020-12-08-indexing-error.png&#34; alt=&#34;Compiler error for indexing Map&#34;&gt;&lt;/p&gt;
&lt;p&gt;What some of you may have noticed in the Python code is that the &lt;code&gt;allocation&lt;/code&gt; collection is indexed by an &lt;code&gt;Item&lt;/code&gt; then &lt;code&gt;Location&lt;/code&gt;. The original code was trying to access it by &lt;code&gt;location&lt;/code&gt; then by &lt;code&gt;item&lt;/code&gt;. This would have thrown an error at runtime due to a missing value. In F# this becomes a compiler error. The type system itself it is helping you. This may seem small, but this is one of the most painful types of errors when debugging a Mathematical Planning model.&lt;/p&gt;
&lt;p&gt;Someone may say that this can be accomplished in other languages and I would agree. I believe where F# is unique is in the simplicity and ease of using single case Discriminated Unions for wrapping primitives. It is virtually no additional effort.&lt;/p&gt;
&lt;h2 id=&#34;units-of-measure-the-achilles-heel-of-numbers&#34;&gt;Units of Measure: The Achilles Heel of Numbers&lt;/h2&gt;
&lt;p&gt;There is an underappreciated problem in software development, numbers are rarely just numbers. They represent something: &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;feet&lt;/code&gt;, &lt;code&gt;kg&lt;/code&gt;, or &lt;code&gt;meters&lt;/code&gt;. Normally we do not care about a raw number. Our primary concern is with what the number represents. In most languages there are no easy mechanisms for tracking the Units of Measure associated with a number. F# on the other hand has baked the concept of a Unit of Measure into the type system.&lt;/p&gt;
&lt;p&gt;The Units of Measure feature will reveal the second problem with the Python code that otherwise may remain undetected. Let&amp;rsquo;s update our domain with some new types to track the units on our numbers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Servings&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Kg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have units to represent &lt;code&gt;Servings&lt;/code&gt; and &lt;code&gt;Kg&lt;/code&gt;. Let&amp;rsquo;s update our &lt;code&gt;availability&lt;/code&gt; collection to store numbers with these units attached.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; availability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 14&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now provided more context around our availability numbers. We now know they are stored in units of &lt;code&gt;Kg&lt;/code&gt;. The F# compiler will enforce correct algebra as we work with them. We now update our Decisions to be in units of &lt;code&gt;Servings&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; allocation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AmountSent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; items &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                Continuous &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; 1_000_000&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With our Decisions updated, we go back to our constraint definition and we now see a new bug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2020-12-08-units-of-measure-mismatch.png&#34; alt=&#34;Units of Measure Mismatch&#34;&gt;&lt;/p&gt;
&lt;p&gt;The important part of this message is at the bottom. The compiler is complaining that the left-hand is in units of &lt;code&gt;Servings&lt;/code&gt; and the right-hand side is in units of &lt;code&gt;Kg&lt;/code&gt;. It does not make sense to compare values that are in different units, so the compiler is throwing an error. In other languages this error would go undetected. Worse, it may not even be caught in unit testing because the math will still work, it just won&amp;rsquo;t give correct results.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go ahead and add some conversion data so that we can fix this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; itemMass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        Item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Kg&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Servings&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have data which will allow us to convert from &lt;code&gt;Serving&lt;/code&gt; to &lt;code&gt;Kg&lt;/code&gt;. Let&amp;rsquo;s incorporate it into our constraint creation expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; allocationContraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
  ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ItemLimit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; items &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
      List.sum &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; itemMass&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; itemAllocation&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; availability&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the compiler is happy because the units are in &lt;code&gt;Kg&lt;/code&gt; on both sides. This simple feature of ensuring correct Units of Measure eliminates what is possibly the most nefarious bug in Mathematical Planning. It would be hard to calculate the number of hours wasted on badly formulated models due to mismatched Units of Measure.&lt;/p&gt;
&lt;h2 id=&#34;simple-building-blocks&#34;&gt;Simple Building Blocks&lt;/h2&gt;
&lt;p&gt;F# is an incredibly expressive language while staying lean on the number of features. Other languages have taken the approach of throwing every possible feature in. F# is relatively slow to incorporate new features and they are always purposeful. Most of the time the feature is orthogonal to the rest of the language. This is keeping the language approachable for newcomers so the climb to mastery is not nearly as steep. I believe these two simple features, Discriminated Unions and Units of Measure, uniquely position F# as an awesome language for Mathematical Planning.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Reindeer Secret Santa Assignment Problem</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-07/</link>
<pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-07/</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;Note: To see the completed code, please go &lt;a href=&#34;https://github.com/matthewcrews/modelmondays/blob/main/ModelMonday/2020-12-06-SecretSantaExchange.fs&#34;&gt;here&lt;/a&gt;. All code for Model Mondays is kept in &lt;a href=&#34;https://github.com/matthewcrews/modelmondays&#34;&gt;this&lt;/a&gt; repo and is MIT licensed. Feel free to use it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was having a chat with a friend about what types of problems are good candidates for Mathematical Planning. He posed the question, &amp;ldquo;Would a Secret Santa exchange be a good candidate?&amp;rdquo; At first, I thought, &amp;ldquo;no.&amp;rdquo; As we kept chatting though, I changed my mind. This is a great problem for Mathematical Planning.&lt;/p&gt;
&lt;p&gt;For those who are not familiar with what a Secret Santa exchange is, it is when a group of people get together and all put their names in a hat. Everyone draws out a name. You then buy a gift for the person who&amp;rsquo;s name you drew. Normally everyone would get back together at a party and exchange gifts. The fun part is that you don&amp;rsquo;t know who is giving you a gift, so it is a double surprise.&lt;/p&gt;
&lt;p&gt;I initially did not think that this was a good candidate for Mathematical Planning because I didn&amp;rsquo;t see a quantifiable objective. There was no way to measure the difference in quality of the different pairings. All valid pairings are equally as good. Normally you would use &lt;a href=&#34;https://en.wikipedia.org/wiki/Constraint_programming&#34;&gt;Constraint Programming&lt;/a&gt; and/or &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem#Online_SAT_solvers&#34;&gt;SAT Solvers&lt;/a&gt; for these problems. SAT Solvers and Constraint Programming is interested in answering the question, &amp;ldquo;Is there an answer which satisfies these constraints?&amp;rdquo; versus Mathematical Planning which asks, &amp;ldquo;What is the &lt;strong&gt;best&lt;/strong&gt; answer which satisfies these constraints?&amp;rdquo; The difference seems small, but the problem is wildly different. Finding the &lt;strong&gt;best&lt;/strong&gt; answer to a problem is more difficult than finding &lt;strong&gt;an&lt;/strong&gt; answer.&lt;/p&gt;
&lt;p&gt;Our conversation continued and my mind was still turning. A new piece of information dropped. This family does Secret Santa every year. &lt;em&gt;Wait a minute&lt;/em&gt;, I thought. &lt;em&gt;Don&amp;rsquo;t we want an answer which pairs you with new people each year? Wouldn&amp;rsquo;t it be better if you had someone different than you had the year before or the year before that?&lt;/em&gt;. This problem just became a Mathematical Planning problem!&lt;/p&gt;
&lt;h2 id=&#34;a-reindeer-gift-exchange&#34;&gt;A Reindeer Gift Exchange&lt;/h2&gt;
&lt;p&gt;I decide to embrace a bit of whimsy and instead of people exchanging gifts, I make it Reindeer. I mean, wouldn&amp;rsquo;t Santa&amp;rsquo;s reindeer want gifts as well? I begin modeling my problem by creating a simple domain to describe my problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reindeer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Giver&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Giver &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; Reindeer
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Receiver&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Receiver &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; Reindeer
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SecretSanta&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Reindeer
    PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Receiver &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I assume I am going to get the names of the Reindeer as &lt;code&gt;string&lt;/code&gt; so I wrap them in a single case Discriminated Union to provide context to the data. The &lt;code&gt;Reindeer&lt;/code&gt; will be both givers and receivers so I make additional types to represent the direction of relationships: &lt;code&gt;Giver&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt;. The &lt;code&gt;SecretSanta&lt;/code&gt; type represents a &lt;code&gt;Reindeer&lt;/code&gt; and the other &lt;code&gt;Reindeer&lt;/code&gt; they have given gifts in years past. The &lt;code&gt;PreviousReceivers&lt;/code&gt; for a &lt;code&gt;SecretSanta&lt;/code&gt; is an ordered list where the first element was the last reindeer the &lt;code&gt;SecretSanta&lt;/code&gt; gave a gift to, the second element was the receipent two years ago, the third element the receiver three years ago, and so on. Our ideal solution has reindeer giving a gift to a different reindeer they have not given a gift to recently.&lt;/p&gt;
&lt;p&gt;Now I create a function which takes a list of &lt;code&gt;SecretSanta&lt;/code&gt;, builds the model, solves it, and returns the assignments. I will call the function &lt;code&gt;findAssignments&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; findAssignments &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;santas&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;SecretSanta &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I now want to get the list of reindeer that I will be working with and create sets of &lt;code&gt;Giver&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt;. The reason for storing this data in a &lt;code&gt;Set&lt;/code&gt; will become apparent in a few moments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    santas
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Reindeer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Set

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; givers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reindeer &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Set.map Giver
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; receivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reindeer &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Set.map Receiver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;measuring-solution-quality&#34;&gt;Measuring Solution Quality&lt;/h2&gt;
&lt;p&gt;I now need to create the penalty values for assigning a reindeer to a reindeer whom they have given a gift to recently. I will do this by using the &lt;code&gt;List.mapi&lt;/code&gt; function which allows me to iterate through a list while providing the index for the item you are on. I use a simple heuristic for calculating the penalty.&lt;/p&gt;
&lt;p&gt;$$\text{penalty} = \text{NumberOfPreviousRecipients}-\text{index}$$&lt;/p&gt;
&lt;p&gt;What this does is provide a high penalty cost for assigning a reindeer to the reindeer they just given a gift to. From there the cost keeps going down. I will store the result in a &lt;code&gt;SMap2&lt;/code&gt; that will be indexed by the &lt;code&gt;Giver&lt;/code&gt; type in the first dimension and the &lt;code&gt;Receiver&lt;/code&gt; type in the second dimension. I have found using simple Discriminated Unions as a powerful tool for tracking how data is indexed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; penalty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; santas &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Get the number of receivers once
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberOfReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PreviousReceivers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Length
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PreviousReceivers
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.mapi &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; idx r &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Giver s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Reindeer&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;numberOfReceivers &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; idx&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.concat
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I now want to create the possible assignments. The key thing here is that it should not be possible to assign a reindeer to give a gift to itself. Therefore, I stored this data in a &lt;code&gt;Set&lt;/code&gt;. The &lt;code&gt;Set&lt;/code&gt; module has a convenient function &lt;code&gt;Set.Remove&lt;/code&gt; which returns a new set with the single value removed from it. I will wrap the &lt;code&gt;Reindeer&lt;/code&gt; values in the &lt;code&gt;Giver&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt; Discriminated Unions to provide context on what the values represent. This becomes incredibly valuable with using the slice notation of SliceMaps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; possibleAssignments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    seq &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; giver &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; reindeer &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// We only want pairings with different reindeer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; receiver &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; reindeer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Remove giver &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Giver giver&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Receiver receiver&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have all the possible assignments for this reindeer Secret Santa exchange. I need to create a &lt;code&gt;Boolean&lt;/code&gt; decision variable for each assignment. This decision variable is what the &lt;code&gt;Solver&lt;/code&gt; engine will use to adjust to find a solution to my problem. &lt;code&gt;1.0&lt;/code&gt; will indicate that the assignment should be used. &lt;code&gt;0.0&lt;/code&gt; will indicate that the assignment should not be used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; assignDecisions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assignment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pairing &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; possibleAssignments &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            Boolean
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The decision variables are stored in a 2-dimensional SliceMap, &lt;code&gt;SMap2&lt;/code&gt;, where the first index is of type &lt;code&gt;Giver&lt;/code&gt; and the second dimension is &lt;code&gt;Receiver&lt;/code&gt;. We now need to create some constraints to ensure our solutions make sense.&lt;/p&gt;
&lt;h2 id=&#34;the-secret-santa-constraints&#34;&gt;The Secret Santa Constraints&lt;/h2&gt;
&lt;p&gt;We now need to provides some Constraints for our problem. The Constraints describe what is and is not allowed. Without Constraints, our Model would give nonsensical answers&lt;/p&gt;
&lt;p&gt;The first set of constraints we will create are the &lt;code&gt;giveOnlyOnce&lt;/code&gt; constraints. These state that a particular &lt;code&gt;Giver&lt;/code&gt; may only give a gift once. We use the slice notation of SliceMaps to easily subset the values in &lt;code&gt;assignDecisions&lt;/code&gt;. The compiler ensures that we are slicing the correct dimension because we have created types for &lt;code&gt;Giver&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; giveOnlyOnce &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GiveOnlyOnce&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; giver &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; givers &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            sum assignDecisions&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;giver&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second set of constraints stipulate that a &lt;code&gt;Receiver&lt;/code&gt; may only receiver one gift. We iterate through the &lt;code&gt;receivers&lt;/code&gt; values and create a constraint for each.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; receiveOnlyOnce &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ReceiveOnlyOnce&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; receiver &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; receivers &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            sum assignDecisions&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; receiver&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-we-quantify-the-assignments&#34;&gt;How We Quantify the Assignments&lt;/h2&gt;
&lt;p&gt;We now want to create our penalty expression which is the function the solver engine will try to minimize. Because we stored our data in SliceMaps, we can use the &lt;code&gt;sum&lt;/code&gt; function and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hadamard_product_(matrices)&#34;&gt;Hadamard Product&lt;/a&gt;, &lt;code&gt;.*&lt;/code&gt;, to express this in a single line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; penaltyExpression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;penalty &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; assignDecisions&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now create an &lt;code&gt;Objective&lt;/code&gt; which states we want to &lt;code&gt;Minimize&lt;/code&gt; this expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinimizePreviousPairings&amp;#34;&lt;/span&gt; Minimize penaltyExpression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s build the model by composing these elements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create objective
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints giveOnlyOnce
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints receiveOnlyOnce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now attempt to solve the model and get the result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve Settings.basic model
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We match on the case of the &lt;code&gt;result&lt;/code&gt; to decide what to call next. In our case, we just want to print the assignments. If this were a production model, we would do something more sophisticated. If the model is solved successfully, we select the decisions where the value is equal to &lt;code&gt;1.0&lt;/code&gt; which indicates that the solver thinks we should use that assignment. We return a list of parings if successful, we return an string saying we couldn&amp;rsquo;t find a solution if the solve was unsuccessful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Optimal solution &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; selectedPairings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Solution.getValues solution assignDecisions
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.filter &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; pair value &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.toSeq
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map fst
    Result.Ok selectedPairings
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Result.Error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to find pairings&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will create some data to test it out and use the amazing &lt;code&gt;Specture.Console&lt;/code&gt; library to print it out as a nice table. Here is the function for printing out the results of solving our model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; prettyPrintResults &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pairings&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; seq&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Giver &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Receiver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Table()
    table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AddColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Giver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore
    table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AddColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Receiver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Giver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer g&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer r&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; pairings &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AddRow&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore

    AnsiConsole.Render&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;finding-the-santa-plan&#34;&gt;Finding the Santa Plan&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s throw some data together and see what we get.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; santas &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rudolph&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blitzen&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dasher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vixen&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dancer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rudolph&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prancer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cupid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Vixen&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;   PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dancer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;   PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dasher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cupid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;   PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donner&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donner&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; Reindeer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blitzen&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; PreviousReceivers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Receiver &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Reindeer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prancer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; findResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findAssignments santas

&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; findResult &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Ok pairings &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; prettyPrintResults pairings
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Error &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No Christmas this year :(&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we run this, the console reports&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;┌─────────┬──────────┐
│ Giver   │ Receiver │
├─────────┼──────────┤
│ Blitzen │ Dasher   │
│ Comet   │ Rudolph  │
│ Cupid   │ Blitzen  │
│ Dancer  │ Prancer  │
│ Dasher  │ Dancer   │
│ Donner  │ Cupid    │
│ Prancer │ Vixen    │
│ Rudolph │ Donner   │
│ Vixen   │ Comet    │
└─────────┴──────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Excellent work! Another Secret Santa successfully planned!&lt;/p&gt;
&lt;h2 id=&#34;real-world-applications&#34;&gt;Real World Applications&lt;/h2&gt;
&lt;p&gt;Though the domain for this problem was silly, the type of model this represents is common. Instead of reindeer and Secret Santa, this could have been operators and machines that they run. You would want operators to rotate through machines so that they are getting experience with all of them. This model would ensure that operators are regularly getting exposed to different machines.&lt;/p&gt;
&lt;p&gt;It could also be software developers and projects. Each project could have a set of technologies they require, and the developers have the type of project they were just on. To ensure that the developers are getting exposed to different tools, a model like the one we just built ensures they are being moved around.&lt;/p&gt;
&lt;p&gt;Assignment problems are incredibly common and normally there is some quantification of &amp;ldquo;goodness&amp;rdquo;. Assigning people to projects, assigning tools to work sites, assigning jobs to groups. Assignment problems come up in every industry.&lt;/p&gt;
&lt;p&gt;Let me know if there are specific problems you would like me to work on. Feel free to use this model and modify it for your own purposes.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The Under Appreciated Power of Object Expressions</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-04/</link>
<pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-04/</guid>
<description>&lt;p&gt;There is a feature of F# this is incredibly powerful and rarely talked about: The Object Expression. It is such a simple idea that it is almost boring but the implications of it are profound. We often define an interface to abstract the implementation of an object so that we can code against different implementations. By programming against an &lt;code&gt;IEnumerable&lt;/code&gt; or &lt;code&gt;IDictionary&lt;/code&gt;, we can write algorithms which work against a host of different backing data structures. To use these abstractions, we implement the interface on our classes.&lt;/p&gt;
&lt;p&gt;What if I told you that there is a different way? What if I told you it was possible to build objects in a Frankenstien style where we could define each member as we chose? This may sound a little odd but the freedom it gives you in testing is incredible. Before we dive deep into how we use Object Expressions, let&amp;rsquo;s talk about what they are.&lt;/p&gt;
&lt;h2 id=&#34;object-expression-what-art-thou&#34;&gt;Object Expression: What art thou?&lt;/h2&gt;
&lt;p&gt;Whenever I start working with a new developer, there are two things I stress with them when it comes to reasoning about F#.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;F# does not have variables, it has values$^1$&lt;/li&gt;
&lt;li&gt;Everything is an expression. Everything returns something, even if that something is nothing$^2$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two ideas can cause some cognitive dissonance for imperative programmers used to C, C++, C# or their brethren. Those are great languages. The family of C languages and their imperative programming cousins just have a different philosophy. In imperitive programming you can just perform an action without it returning anything. In F#, something will always be returned because everything is an expression.&lt;/p&gt;
&lt;p&gt;Alright, so I&amp;rsquo;ve established that F# has a different way of thinking. But what makes Object Expressions special? Well, if we were working in C# and we wanted to create an object which fulfilled an interface contract, we would need to declare that type and then implement the interface. Let&amp;rsquo;s declare an incredibly simple interface &lt;code&gt;IAnimal&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IAnimal
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Size
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now declared an &lt;code&gt;IAnimal&lt;/code&gt; interface. If we want to work with an instance of it, we must define a class which implements this interface. Let us define a &lt;code&gt;Chicken&lt;/code&gt; class which implements this interface. Let&amp;rsquo;s assume that I want instances of this class to be immutable to protect against mutation. I&amp;rsquo;ll go ahead and make my life easier by using a C# 9.0 feature, Records.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; record Chicken : IAnimal
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Size { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Chicken(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; size) =&amp;gt; (Name, Size) = (name, size);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, I have an interface and now I have a class which implements that interface. If I want to play around with functions or methods that take that interface as an argument, I will need to create instances of &lt;code&gt;Chicken&lt;/code&gt; unless I want to declare another class which implements &lt;code&gt;IAnimal&lt;/code&gt;. For testing purposes I may define a &lt;code&gt;MockAnimal&lt;/code&gt; which has different behaviors. I may have to define several different &lt;code&gt;MockAnimal&lt;/code&gt; classes if I want test different behaviors.&lt;/p&gt;
&lt;p&gt;So, this is all fine and doesn&amp;rsquo;t seem too cumbersome but the more complex the interface the more you will find yourself creating mock versions to test with. F# provides a different mechanism for implementing interfaces, the Object Expression! Let&amp;rsquo;s say we&amp;rsquo;ve abstracted the interaction with a database behind an &lt;code&gt;IRepository&lt;/code&gt; inteface. Let&amp;rsquo;s declare a silly &lt;code&gt;IRepository&lt;/code&gt; for storing and retrieving Pigs. Here&amp;rsquo;s that interface in F#.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Some fields which define a pig
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IRepository&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; GetById &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Pig
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; Save &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; pig&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Pig &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our interface has two methods. One for saving Pigs and one for retrieving Pigs by an Id. In both cases we could possibly get an exception due to the database not being available. If we were in C# and we wanted to work with this interface, we would need to define a class which implements this interface. What if we could just define an object which implements this interface out of thin air? Let me show you how to do that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; geyById id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A function in our domain that does the work of querying
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; save &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pig&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Pig&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A function in our domain that does the work of saving
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; repository &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IRepository &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; _.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetById&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getById id
        &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; _.&lt;span style=&#34;color:#a6e22e&#34;&gt;Save&lt;/span&gt; pig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; save pig
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What just happened? There are two functions in the domain which know how to do the work of retrieving and saving our pigs: &lt;code&gt;getById&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt;. Instead of defining a new class, we said, &amp;ldquo;Hey F#, I want an object which fulfilles the &lt;code&gt;IRepository&lt;/code&gt; interface and I want you to use these functions to do it.&amp;rdquo; We don&amp;rsquo;t need to define a class; we can just make an object and bolt together functions to fulfill the &lt;code&gt;IRepository&lt;/code&gt; contract. I think of this as interface by Frankenstein assembly.&lt;/p&gt;
&lt;h2 id=&#34;buy-why-do-i-care&#34;&gt;Buy Why Do I Care?&lt;/h2&gt;
&lt;p&gt;While that example may be cute, it may not wow you. Let&amp;rsquo;s talk where this is impactful: testing! One of the most difficult challenges we face when writing robust code is ensuring that our services both succeed when given clean inputs but also fail, the way we want them to. As a policy, we always write tests which confirm that the happy path works as intended and that the various failure modes are dealt with correctly.&lt;/p&gt;
&lt;p&gt;This type of testing gets painful when you have external dependencies like databases or APIs that are outside your domain. You either must be able to stand up a mock version of the service in your CI/CD pipeline or implement mock versions of your classes just for testing. What if instead of that, we could create an object which behaved exactly as intended?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at testing the &lt;code&gt;IRepository&lt;/code&gt; interface. I have abstracted out what the backing service is in the case. Let&amp;rsquo;s I want to verify that my business logic responds appropriately to a &lt;code&gt;SqlException&lt;/code&gt;. Rather than standing up a SQL Server instance and artificially creating a bad state, I&amp;rsquo;ll create an object that behaves exactly how I want it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mockRepository &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IRepository &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; _.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetById&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raise &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlException()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; _.&lt;span style=&#34;color:#a6e22e&#34;&gt;Save&lt;/span&gt; pig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ()
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;code&gt;mockRespository&lt;/code&gt; will always raise a &lt;code&gt;SqlException&lt;/code&gt; and will appear to be successful any time I call the &lt;code&gt;Save&lt;/code&gt; method. I can have my mock repository behave any way that I want by just swapping out different functions to give the desired behavior. I don&amp;rsquo;t have to define a new class each time I want slightly different behavior. Where this gets even more exciting is when you are trying to test failure modes which involve multiple external services. It is relatively easy to abstract all of them behind interfaces and the construct mock instances that will behave exactly as intended.&lt;/p&gt;
&lt;p&gt;I believe that the Object Expression feature in F# is really under appreciated. It makes it easy to create arbitrary implementations of interfaces. I am sure that it has utility outside of testing as well. I have found that it makes unit and property-based testing relatively painless. I hope this opens your eyes a little to how you can streamline your testing needs in F#.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$^1$ Technically it is possible to declare a variable in F#. You must add the &lt;code&gt;mutable&lt;/code&gt; modifier to the declaration. The key point is that F# deals with values by default, not variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$^2$ When F# returns &amp;ldquo;nothing&amp;rdquo;, it returns the type &lt;code&gt;unit&lt;/code&gt;. The key thing is that even an action which does not &amp;ldquo;seem&amp;rdquo; to return a value is still actually returning something. The implications are deeper than I have time for here. I encourage the curious to look into &lt;a href=&#34;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&#34;&gt;&amp;ldquo;Category Theory for Programmers&amp;rdquo;&lt;/a&gt; by Barstosz Milewski.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
</item>
    
    <item>
<title>The Mentor Matching Problem</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-03/</link>
<pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-03/</guid>
<description>&lt;p&gt;There are few things I love more than a fresh mathematical planning challenge so I was delighted when &lt;a href=&#34;https://twitter.com/KAvignon&#34;&gt;Kevin Avignon&lt;/a&gt; reached out to me and asked me to look at a question he had posted on the Software Engineer Stack Exchange site. He wanted to know whether the question was a candidate for Mathematical Planning. &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/418268/mentorship-schedule-matchmaking-algorithm&#34;&gt;The question&lt;/a&gt; is a really interesting problem of pairing Mentors and Mentees. Mentors have a set of skills they can teach. Mentees have a set of skills they are interested in learning. Both Mentors and Mentees only have certain times they are available. Mentors are also capable of mentoring multiple mentees.&lt;/p&gt;
&lt;p&gt;So, for this sounds like a straightforward assignment problem but then there is a twist. The questioner wanted pairings of rare skills to be a higher priority than pairings of more common skills. Ah, now we have a Mathematical Planning problem! We have the three key ingredients:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Quantifiable Objective: We want to maximize the value of pairings based on the rarity of the skill&lt;/li&gt;
&lt;li&gt;Constraints to follow: Mentors and Mentees must match on skills and availability&lt;/li&gt;
&lt;li&gt;Decision to make: Which Mentors and Mentees do we pair at what time?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any time I see those three ingredients, I know I have a Mathematical Planning problem on my hands. I respond to Kevin and say, &amp;ldquo;Yes! You have a great candidate for Mathematical Planning! I&amp;rsquo;ll put something together for you this evening.&amp;rdquo; I begin mulling this problem as the day goes by. Once the family is all in bed, I turn on my PC and start modeling!&lt;/p&gt;
&lt;h2 id=&#34;define-the-domain&#34;&gt;Define the Domain&lt;/h2&gt;
&lt;p&gt;The first thing I do is put together a tiny domain of types to represent my problem. I encourage anyone who is writing these models in F# to take advantage of domain modeling because it will protect you again some nefarious bugs. To learn more, check out Scott Wlaschin&amp;rsquo;s book &lt;a href=&#34;https://fsharpforfunandprofit.com/books/&#34;&gt;Domain Modeling Made Functional&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; MentorMatching

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Types &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MentorId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MentorId &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MenteeId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MenteeId &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Skill&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Skill &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Period&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Period &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; int
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MenteeCapacity&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MenteeCapacity &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mentor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        MentorId &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MentorId
        Skills &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Skill Set
        Periods &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Period Set
        MaxMentees &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MenteeCapacity
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mentee&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        MenteeId &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MenteeId
        Skills &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Skill Set
        Periods &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Period Set
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This simple set of types represent the problem space that I will build a mathematical planning model around. I now want to create a function which builds the model. I like to type out the functions signatures of what I am trying to implement beforehand as a way to get a high-level overview for that I am about to build. It&amp;rsquo;s an idea I got from &lt;a href=&#34;https://blog.ploeh.dk/&#34;&gt;Mark Seemann&lt;/a&gt; in his excellent PluralSight course &lt;a href=&#34;https://app.pluralsight.com/library/courses/fsharp-type-driven-development/table-of-contents&#34;&gt;Type-Driven Development with F#&lt;/a&gt;. Here is the function signature that I come to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private buildModel &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mentees&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Mentee seq&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mentors&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Mentor seq&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;skillValue&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;SMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Skill&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;SMap4&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Skill&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Period&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Mentor&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Mentee&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;Decision&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;mentees&lt;/code&gt; and &lt;code&gt;mentors&lt;/code&gt; arguments are self-explanatory. They are the mentors and mentees we want to pair up. The &lt;code&gt;skillValue&lt;/code&gt; argument is the value we have assigned to each &lt;code&gt;Skill&lt;/code&gt; for this problem. I will discuss the heuristic we use to calculate the value for a skill in a following section. The &lt;code&gt;pairingDecision&lt;/code&gt; argument is a 4-dimensional &lt;a href=&#34;http://matthewcrews.com/SliceMap/#/&#34;&gt;SliceMap&lt;/a&gt;. The first dimension is the &lt;code&gt;Skill&lt;/code&gt;, the second dimension is the &lt;code&gt;Period&lt;/code&gt;, the third dimension is the &lt;code&gt;Mentor&lt;/code&gt;, and the final dimension is the &lt;code&gt;Mentee&lt;/code&gt;. The value in the SliceMap is a &lt;code&gt;Boolean&lt;/code&gt; decision which indicates whether to use the pairing or not. We will be taking advantage of the slicing capabilities of SliceMaps to make the formulation more streamlined.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is create a set of constraints which state that a given &lt;code&gt;Mentee&lt;/code&gt; may only be assigned once. We use a &lt;code&gt;ConstraintBuilder&lt;/code&gt; Computation Expression and iterate through the &lt;code&gt;mentees&lt;/code&gt;, creating a constraint for each &lt;code&gt;mentee&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; menteeSingleAssignmentConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MenteeSingleAssignment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mentee &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; mentees &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            sum pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mentee&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to limit how many Mentees a Mentor can take on. This value is the &lt;code&gt;MenteeCapacity&lt;/code&gt; of the &lt;code&gt;Mentor&lt;/code&gt;. We will loop through the sequence of Mentors and create the constraints that we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mentorMaxAssignmentConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MentorMaxAssignments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mentor &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; mentors &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MenteeCapacity menteeCapacity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mentor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MaxMentees
            sum pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mentor&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; menteeCapacity
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is an important nuance to this problem that could easily be missed. Mentors can take on multiple Mentees. It is entirely possible that the same Mentor is mentoring two different Mentees at the same time. This does not make sense. We need to create a set of constraints which prevents this from happening. We will create a constraint for each Mentor and each period to ensure this is not the case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mentorSingleAssignmentForPeriodConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MentorSingleAssignmentForPeriod&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mentor &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; mentors &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; period &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; mentor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Periods &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; period&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mentor&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                sum pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;All&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; period&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mentor&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; All&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is all the constraints that we need but we still need to create an expression that quantifies success, our objective function. We have assigned a value to each &lt;code&gt;Skill&lt;/code&gt;. We want to award pairings of valuable skills. To do that we can multiply the &lt;code&gt;Value&lt;/code&gt; of the &lt;code&gt;Skill&lt;/code&gt; by the decision that corresponds to that skill. The &lt;code&gt;SliceMap&lt;/code&gt; library provides a couple of conveniences for expressing this. The &lt;code&gt;sum&lt;/code&gt; function and the &lt;code&gt;.*&lt;/code&gt; operator. The &lt;code&gt;sum&lt;/code&gt; function is a function meant to be used with SliceMaps to make translating from math notation to code more straightforward. It is not strictly necessary, but it does make this kind of work more straightforward. The &lt;code&gt;.*&lt;/code&gt; operator is known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hadamard_product_(matrices)&#34;&gt;Hadamard Product&lt;/a&gt;. If you have worked in Matlab, you probably recognize it. It is an element by element multiplication along matching dimensions. In this case it is going to multiply the value associated with each &lt;code&gt;Skill&lt;/code&gt; by the pairing decision that it corresponds to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; assignmentValueExpr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;skillValue &lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt; pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;assignmentValueExpr&lt;/code&gt; is a mathematical expression which quantifies how good of a solution the Solver has found. This is the thing we are wanting the Solver to make as large as possible. From here we create an &lt;code&gt;Objective&lt;/code&gt; and compose our model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxAssignmentValueObjecitve &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxAssignmentValue&amp;#34;&lt;/span&gt; Maximize assignmentValueExpr

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create maxAssignmentValueObjecitve
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints menteeSingleAssignmentConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints mentorMaxAssignmentConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints mentorSingleAssignmentForPeriodConstraints
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From here we can call the &lt;code&gt;Solver.solve&lt;/code&gt; function and get our results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; solveSettings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    SolverType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CBC
    MaxDuration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1_000L
    WriteLPFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve solveSettings model

&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Optimal sln &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    Solution.getValues sln &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pairingDecision&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AsMap()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.toSeq
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.filter &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Get the Pairings that the solver selected
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map fst &lt;span style=&#34;color:#75715e&#34;&gt;// Return just the tuple representing the pairing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Result.Ok
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Result.Error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Solving
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to see the full solution, check out &lt;a href=&#34;https://github.com/matthewcrews/MentorMatching&#34;&gt;the repo&lt;/a&gt; where I put it together.&lt;/p&gt;
&lt;h2 id=&#34;quantifying-the-value-of-a-skill&#34;&gt;Quantifying the Value of a Skill&lt;/h2&gt;
&lt;p&gt;Earlier I mentioned that I would talk about the heuristic that was used to evaluate the value of a skill. I propose that we just rank the skills by the frequency of their occurrence and assign value based on its rank.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private getSkillValue &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mentees&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Mentee seq&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mentors&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;Mentor seq&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; menteeSkills &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        mentees
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.collect &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Skills&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mentorSkills &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        mentors
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.collect &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Skills&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; skillCounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Seq.append menteeSkills mentorSkills
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.countBy id

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numberOfSkills &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Seq.length skillCounts

    skillCounts
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.sortBy snd
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.mapi &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;skill&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; skill&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;numberOfSkills &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Map.ofSeq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ranking and scoring will ensure that the solver will choose low frequency skills over high frequency skills. There are some bizarre edge cases that could crop up, but I don&amp;rsquo;t have the space to cover them here.&lt;/p&gt;
&lt;h2 id=&#34;why-mathematical-planning-instead-some-other-algorithm&#34;&gt;Why Mathematical Planning instead some other algorithm?&lt;/h2&gt;
&lt;p&gt;While this was a fun challenge, it is important to step back and ask, &amp;ldquo;Why would I choose this technique over some other?&amp;rdquo; The question on Stack Exchange has an interesting discussion of different approaches people proposed. Each of them has their own merit. The reason that I often propose Mathematical Planning that it is easy to modify should the nature of the problem change. If some new constraint was required, it would be relatively easy to refactor the code and add it. Bespoke implementations of heuristics are often difficult to refactor and evolve over time.&lt;/p&gt;
&lt;p&gt;This was a fun challenge and I hope it ends up being useful. If you have questions about whether your problem is a good candidate for Mathematical Planning, please reach out!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Modeling Non-Linear Functions with Flips</title>
<link>https://matthewcrews.com/blog/2020/12/2020-12-01/</link>
<pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/12/2020-12-01/</guid>
<description>&lt;p&gt;Recently I was asked if it would be possible to add the &lt;code&gt;log&lt;/code&gt; function to the &lt;a href=&#34;https://flipslibrary.com&#34;&gt;Flips library&lt;/a&gt;. Flips is a library for modeling and solving Linear and Mixed-Integer Programming problems. Both classes of problems are constrained to only having linear (i.e. straight) lines. You may ask, &amp;ldquo;What do you mean by straight?&amp;rdquo; The following are examples of linear functions.&lt;/p&gt;
&lt;p&gt;$$
\displaylines{
\text{Linear Functions}\\&lt;br&gt;
y=1.0x+2.0 \\&lt;br&gt;
y=2.0x_{1}+3.0x_{2} \\&lt;br&gt;
y=1.2x_{1}+1.7x_{2}+x_{3}
}
$$&lt;/p&gt;
&lt;p&gt;The following are non-linear functions.&lt;/p&gt;
&lt;p&gt;$$
\displaylines{
\text{Non-Linear Functions} \\&lt;br&gt;
y=1.0x^2+2.0 \\&lt;br&gt;
y=2.0/x_{1}+3.0x_{2} \\&lt;br&gt;
y=1.2x_{1}+1.7x_{2}\times x_{3}
}
$$&lt;/p&gt;
&lt;p&gt;For a function to be linear in the domain of Linear/Mixed-Integer Programming the variables can only be added, subtracted, or multiplied by a coefficient. The reason this is important is because a Solver takes advantage of this structure which searching for solutions.&lt;/p&gt;
&lt;h2 id=&#34;what-if-we-need-a-non-linear-function&#34;&gt;What if we need a Non-Linear Function&lt;/h2&gt;
&lt;p&gt;Fortunately, we have ways of working around this limitation. Another way to think of a curve is just a series of straight lines. We could approximate our curve using a series of straight lines that were close enough to the original function to make our answer meaningful. For this example, let&amp;rsquo;s try modeling the parabola $y=-x^2+10.0$. We will use this to represent the Objective Function of our model. Below you see a plot which has a smooth grey line for the exact values of our parabola and a series of point connect by blue line segments. You will notice that the blue line segments closely match the shape of the parabola.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2020-12-01-line-segments.png&#34; alt=&#34;Smooth Function as Line Segments&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our goal is to now model our original parabola with a series of segments. We will create a Decision variable which corresponds to each point on the plot. To get a value along the line segments we take a percent of the adjacent points. If I wanted the value of $y$ at the point $x=0.5$, I would use 50% of the value of $x$ at 0.0 and 50% of the value of $x$ at $1.0$. You may recognize this as &lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_interpolation&#34;&gt;linear-interpolation&lt;/a&gt;. If we want a value for x that is between our Decision variable, we just use a percent of the adjacent decisions. Let&amp;rsquo;s get to the code!&lt;/p&gt;
&lt;p&gt;We open the &lt;code&gt;Flips&lt;/code&gt; library and generate the set of points we want Decisions for. We create a range of values from &lt;code&gt;-5.0&lt;/code&gt; to &lt;code&gt;5.0&lt;/code&gt; and provide an index for the value. We extract the index values to be elsewhere in our code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.Types
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Flips.SliceMap

&lt;span style=&#34;color:#75715e&#34;&gt;// The Range of values we want to consider and the index for the value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; valueRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.mapi &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; index value &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; index&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// We will need the indices for the vertices of our lines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; valueRange &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.map fst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now want to create a &lt;code&gt;Decision&lt;/code&gt; which corresponds for each of these points.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Create a decision variable for each point
let decs =
    DecisionBuilder &amp;quot;Amount&amp;quot; {
        for i in indices -&amp;gt;
            Continuous (0.0, 1.0)
    } |&amp;gt; SMap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we need to create a constraints which says the total percentage of the points that we use must be equal to &lt;code&gt;1.0&lt;/code&gt;. This ensures that the solver is selecting a point along one of our segments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We create a constraint saying that we must 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; totalOneConstraint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TotalValue&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum decs &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of the other rules that we need to impose is that the Solver can only use adjacent points for interpolation. It would make no sense if the Solver interpolated between the points &lt;code&gt;-5.0&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt;. To enforce this behavior, we are going to need to create an additional set of Decisions which correspond to the adjacent points along our line. We use the &lt;code&gt;List.pairwise&lt;/code&gt; function to iterate through the adjacent indices and create the corresponding &lt;code&gt;Decision&lt;/code&gt;. This decision type will be a &lt;code&gt;Boolean&lt;/code&gt; because we either want the solver to use the pair of points or to not use them at all.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We create an indicator variable which corresponds to pairs of points
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// on the line we are modeling
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; usePairDecisions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    DecisionBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UsePair&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; List.pairwise indices &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            Boolean
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; SMap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have a &lt;code&gt;Boolean&lt;/code&gt; decision which corresponds to the pairs of Decisions, we need to create a set of constraints which will ensure that the Solver is only using one pair of points. We will do this with two types of constraints. The first constraint states that only one of the Pair decisions can be on at any given time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A constraint stating that only one pair may be used
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; onlyOnePair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OnlyOnePair&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum usePairDecisions &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second type of constraints is for each pair of points. It states that if the &lt;code&gt;usePairDecision&lt;/code&gt; is set to &lt;code&gt;1.0&lt;/code&gt;, then the Solver must assign a total of &lt;code&gt;1.0&lt;/code&gt; to the two corresponding decisions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We state that if we want to use the pair of vertices,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the indicator variable associated with that pair must
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// be on as well
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; pairConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    ConstraintBuilder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UsePair&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; KeyValue &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; usePairDecisions &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            decs&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; decs&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;==&lt;/span&gt; d
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have all the structure we need in place to solve a model using our approximation of the parabola. We create a &lt;code&gt;costExpression&lt;/code&gt; which gives us the simplication of the parabola.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We create a expression that is an approximation of our parabola
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; costExpression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    List.sum &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; valueRange &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 10&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; decs&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We take the &lt;code&gt;costExpression&lt;/code&gt; and use that to create our &lt;code&gt;Objective&lt;/code&gt;. From there we create the &lt;code&gt;model&lt;/code&gt; and populate it with the constraints we created earlier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We creat an objective which is to maximize our expression
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Objective.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MaxValue&amp;#34;&lt;/span&gt; Maximize costExpression

&lt;span style=&#34;color:#75715e&#34;&gt;// We create a model and add the constraints
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create objective
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints pairConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint onlyOnePair
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint totalOneConstraint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are now ready to solve the model. We are only using the basic settings since this is such a simple problem. We call solve and print out the results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We are only using basic settings
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; settings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  Settings.basic

&lt;span style=&#34;color:#75715e&#34;&gt;// We attempt to solve the problem and return the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve settings model

&lt;span style=&#34;color:#75715e&#34;&gt;// If the result is a success, we print out the value of the expression
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// we were maximizing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Optimal solution &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Objective Value: %f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Objective.evaluate solution objective&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result that is printed out&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Objective Value: 10.000000
val it : unit = ()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can validate this result visually by looking at the plot above.&lt;/p&gt;
&lt;h2 id=&#34;constraints-on-non-linear-functions&#34;&gt;Constraints on Non-Linear Functions&lt;/h2&gt;
&lt;p&gt;To make things more interesting, let&amp;rsquo;s add a constraint which says that our parabola can only go up to &lt;code&gt;-1.0&lt;/code&gt;. This would correspond to saying $x\leq -1.0$. Now remember, we do not actually have a single $x$, we have a series of them which correspond to the different points on our plat. So how do we model this? Quite easily! We add a constraint which says the value of our decisions multiplied the corresponding &lt;code&gt;y&lt;/code&gt; value, must be less or equal to &lt;code&gt;-1.0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; lessThanNegativeOne &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; valueExpression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.sum &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; valueRange &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; decs&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
    Constraint.create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LessThan-1.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;valueExpression &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the same code for creating the model and solving. We just add our new constraint to the model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.create objective
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraints pairConstraints
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint onlyOnePair
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint decisionsTotalToOne
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Model.addConstraint lessThanNegativeOne
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; settings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  Settings.basic

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver.solve settings model

&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Optimal solution &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
    printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Objective Value: %f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Objective.evaluate solution objective&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the result&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Objective Value: 9.000000
val it : unit = ()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, we look at our plot and this makes sense. Hopefully, that provides a little insight into how to model non-linear functions using linear approximations.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>What I Look for in a Machine Learning Engineer</title>
<link>https://matthewcrews.com/blog/2020/10/2020-10-08/</link>
<pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2020/10/2020-10-08/</guid>
<description>&lt;p&gt;I was recently asked by someone, &amp;ldquo;What do I need to do to get into Machine Learning and Finance industry?&amp;rdquo; I told them that I would think about it and get back to them. I have been in many interviews for Machine Learning Engineers and I do have a set of questions that I frequently use to get a feeling for where someone is in their career and where they are hoping to go. We are looking for people at various phases in their growth, so it is less of a concern about whether someone is some elite developer and more about whether they are inquisitive and eager to learn. I will not share the questions I use in interviews, but I will happily share the attributes I am looking for.&lt;/p&gt;
&lt;h2 id=&#34;sound-engineering&#34;&gt;Sound Engineering&lt;/h2&gt;
&lt;p&gt;Before anything else, I am looking for someone&amp;rsquo;s engineering acumen. I went to college for Chemical Engineering and I believe on our first day the professor defined engineering as problem solving under constraints. The key thing that we learned was how to take an abstract problem statement, break it down into manageable pieces, and then solve the smaller subproblems. I believe that most of engineering discplines could be boiled down to this, they just deal with different problem domains.&lt;/p&gt;
&lt;p&gt;I believe a key differentiator between more and less experienced developers is in understanding where to break the problem down. Problems have an inherent amount of complexity. Good design can mitigate that complexity keep it from growing out of control. It is the same concept of algorithmic complexity. We analyze an algorithm and see how the runtime grows as the size of the problem increases. In the same way, we can look at an architecture and see how the complexity grows as we increase functionality and services.&lt;/p&gt;
&lt;p&gt;The domain of Machine Learning is still relatively fresh, and the industry is still churning with new Python libraries popping out every other week. Therefore, the solutions we build for delivering Machine Learning Models must be well designed because they will likely need to evolve. Building a system that can cleanly evolve over time is a difficult engineering challenge. I am looking for people who understand the implications of decisions in the near term but also how it will affect the evolveability of the system going forward.&lt;/p&gt;
&lt;h2 id=&#34;strong-machine-learning-fundamentals&#34;&gt;Strong Machine Learning Fundamentals&lt;/h2&gt;
&lt;p&gt;Though this may seem obvious, there are some nuances I wanted to highlight. While I am fascinated by the advances we are seeing with Neural Networks and Reenforcement Learning, they should not be the first tool you reach for. I am going to ask someone about a hypothetical problem and get their feedback on how they would approach it. If the first thing they suggest is, &amp;ldquo;Oh, use a Neural Network!&amp;rdquo; red flags are going to go off. Neural Networks are powerful, but they should not be the first tool you reach for in your toolbox.&lt;/p&gt;
&lt;p&gt;It is impressive just how far you can get with Linear Regression and Logistic Regression. These algorithms are robust, and their behavior is easily explained. It is enourmously valuable to be able to explain the behavior of a model to your non-ML colleagues in terms they can understand. You can then take things a step further and do some data exploration and try subsetting your population and having different models for the different populations. Think of it as a brute force Ensemble technique. Now, if you reach the end of Linear and Logistic Regression, I am all for trying more sophisticated techniques. You just should not start with the fanciest tool in your toolbox.&lt;/p&gt;
&lt;p&gt;I also want someone to understand the failure modes of the model and how they impact the outcome. It is easy to get caught up in trying to tune a model for a particular metric but is that really the best thing for how it will be used in production? Machine Learning models really took off when they were applied to the field of advertising where the upside of being correct was large but the downside of being wrong was low. This was a perfect application of these tools. What happens when the downside of a wrong prediction is large? What if a wrong prediction leads to someone dying? What metric are you going to tune the model for in that scenario? I want someone who is going to ask the question, &amp;ldquo;Why do you want to predict that? How do you plan to use the prediction?&amp;rdquo; because only when you know that can you really discern the best model.&lt;/p&gt;
&lt;h2 id=&#34;team-skills&#34;&gt;Team Skills&lt;/h2&gt;
&lt;p&gt;The industry often calls these &amp;ldquo;Soft Skills&amp;rdquo;. I think that undervalues how critical they are. The problems we are facing now are so large and complex they cannot be completed by a single individual. If someone does not have the ability to operate well within a team, I am not interested. I do not care how much of a wizard you are. If you are one of the fabled 10X developers but you apply a negative multiplier to the rest of the team, it is going to be a net loss for us.&lt;/p&gt;
&lt;p&gt;The first and most critical Team Skill is the ability to communicate in writing. This includes the clarity of your code, emails, chat, diagrams, all of it. If you do not have the ability to put your thoughts down into a written form, it is going to be difficult for you to pass your ideas around the team. So much of our communication now occurs through text whether it be email, code, pull requests, and chat messages. I will not automatically disqualify someone if there writing is not amazing, but it is a clear differentiator. If you have a blog where I can see your work and how you explain your thoughts, you are automatically in the top 5% of people I interview.&lt;/p&gt;
&lt;p&gt;Next, I want to know if you can explain complex ideas. Throughout the interview I am going to be listening for what you are passionate about or have a deep understanding of. I am then going to ask you to explain that concept to me. I may already be familiar with the subject, but I want to know if you can explain it to someone who is not a domain expert. Developers who can break complex problems down into explainable pieces are a rare breed.&lt;/p&gt;
&lt;h2 id=&#34;technical-skills&#34;&gt;Technical Skills&lt;/h2&gt;
&lt;p&gt;There is a reason this section comes last. While it is important, it is the the that least differentiates people. I care little about which stack or set of technologies you have worked with in the past. If you happen to be familiar with what we are using it is a small bonus, but it is nowhere near the most important thing. I will want to know if you have worked with the concepts though. I want to know if you have worked with Object-Oriented and Functional languages. I want to know if you have worked with Relational Databases or streaming systems. The reason for this is more to guage what training someone would need should they come on board. Finding someone who spends time learning on their own is a huge bonus because it shows curiousity and initiative, not because I expect them to work overtime to get up to speed.&lt;/p&gt;
&lt;h2 id=&#34;academics&#34;&gt;Academics&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t care. I honestly don&amp;rsquo;t. I used to be really intimidated by people with degrees from top end schools and honestly, the above areas matter more in the long run. I work with people from wildly different backgrounds. Do not count yourself out if you do not have a Computer Science degree. I cannot remember where anyone on my team went to school or whether they have degrees.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;So, what do I say to my friend who asks me, &amp;ldquo;How do I get into Machine Learning and Finance?&amp;rdquo; I say, practice and show your work. Start a blog. Talk about what you are learning each week. Learn to turn complex problems into clear prose. Find a problem that you are intersted in and create a GitHub repo where you document your progress. Find some interesting data set and perform some analysis on it. Document what you find. Create a model for predicting an outcome and explain which metrics you used to tune the model and why you chose those metrics. Do it using Pull Requests with tagging. Create a simple ML Model that you deploy as a Nuget package and setup an automated CI/CD pipeline to deliver new versions of the model when you merge to the main branch. These are the daily things we do as being developers.&lt;/p&gt;
&lt;p&gt;Finally, and perhaps most importantly, get involved in the community. Just find a developer tribe you jive with and connect with some people. I know there are some hostile communities out there but there is also an abundance of generous developers. I know Python has tons of resources. I love F# and it is the most generous community I have been a part of. R also has great people and meetups. Connecting with people and learning from them will create more opprotunities than anything else.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The Anatomy of an Optimization Model</title>
<link>https://matthewcrews.com/blog/2019/2019-10-27-the-anatomy-of-an-optimization-model/</link>
<pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2019/2019-10-27-the-anatomy-of-an-optimization-model/</guid>
<description>&lt;p&gt;I am on a bit of a quest to bring Mathematical Optimization to the masses, or at least to Software Developers. I often come across problems where people are wanting to find the best plan for their problem but they lack to tools to express the problem. Typically the way this is &amp;ldquo;solved&amp;rdquo; is by some domain expert coming up with a laborious heuristic in Excel which involves outrageous amount of copying and pasting. I have seen this is take place in tiny companies all the way up to multi-billion dollar enterprises. What really breaks my heart when I see this is that I know there is a better way, but people are just are not aware of it. This is why I am pushing for more training on Mathematical Optimization at my company and why I am starting a blog series on Mathematical Modeling.&lt;/p&gt;
&lt;h2 id=&#34;the-goal&#34;&gt;The Goal&lt;/h2&gt;
&lt;p&gt;My hope with these blog posts is to start from a barebones introduction to the concepts which undergird mathematical modeling and slowly introduce newer and more advanced modeling techniques. I don&amp;rsquo;t think I will ever finish because I am always across new and interesting problems. What I will emphasize is the beautiful interplay between Machine Learning and Mathematical Optimization. I have been blessed to work on several projects where we were able to marry these tools to great effect. If you have any problems that you would like me to look at and write a blog post on, I would be happy to. My hope is to give examples which help people with their own work.&lt;/p&gt;
&lt;h2 id=&#34;ingredients-for-an-optimization-problem&#34;&gt;Ingredients for an Optimization Problem&lt;/h2&gt;
&lt;p&gt;There are three things you need to have before you are reading to apply Mathematical Optimization. You need 1) A Quantifiable Objective 2) Decisions you control and 3) Rules to follow. When you have these three things, you have a problem ripe for Mathematical Optimization. Let me unpack them a little to make sure you understand what I am talking about as we move forward.&lt;/p&gt;
&lt;h3 id=&#34;a-quantifiable-objective&#34;&gt;A Quantifiable Objective&lt;/h3&gt;
&lt;p&gt;For you to apply Mathematical Optimization to a problem you need a way to measure how successful you are. Without this, a Solver will not have a way to check if the solutions that it is finding are actually an improvement or not. You are typically trying to maximize some value or minimize it. Common Objectives are Maximize Revenue, Minimize Waste, Maximize User Engagement, Minimize Energy Use, or Minimize Cost. What you are trying to achieve could really be anything, the key is that you have the ability to quantify it.&lt;/p&gt;
&lt;h3 id=&#34;decisions-you-control&#34;&gt;Decisions You Control&lt;/h3&gt;
&lt;p&gt;When you create a Mathematical Model of your problem you are going to define the Decisions which need to be made. This is often something like how many people you assign to a task, how much water to put where, where to place a warehouse, which ad to show where. These are all examples of decisions you will be making in your business. The important thing is that you actually have control over them. When you solve the Optimization Model, you will get answers for what values you should use for your Decisions. It will tell you how many people to assign to a task or where to put the water or which ad to show where.&lt;/p&gt;
&lt;h3 id=&#34;rules-to-follow&#34;&gt;Rules to Follow&lt;/h3&gt;
&lt;p&gt;Strictly speaking, it is possible to have an Optimization Problem without a set of rules to follow but it is rare. Most real world problems will have some kind of constraint on what you are allowed to do. Typically there are a limited number of people or only so many locations where you can place a warehouse or only so much power available. It is often the rules to follow which make a Optimization Problem interesting. Most often someone is trying to find the best plan given a set of restrictions that they need to follow. These restrictions are what make finding the best answer difficult.&lt;/p&gt;
&lt;h3 id=&#34;where-we-go-from-here&#34;&gt;Where we go from here&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say that we have checked all the boxes and it looks like you have a problem which is a good candidate for Mathematical Optimization. What do we do now? We formulate a model. How we do that is what I am looking forward to opening up to you in this and future blog posts. Once we have a Model of our problem we are able to hand it to a piece of software called a Solver which knows how to take the model and search for the best possible solution.&lt;/p&gt;
&lt;p&gt;My plan for this series is to follow a simple pattern. First, present a real world problem which will help us ground the concepts. Second, develop the mathematical model and walk through how it works. There will be some math notation but I&amp;rsquo;ll walk through it slowly so you don&amp;rsquo;t get lost. Thirdly, translate the model into code. I will be using Python and the PuLP library for my examples. Python is ubiquitous and the PuLP library is open source and easy to install.&lt;/p&gt;
&lt;p&gt;In the rest of this post I will walk through a toy problem for the purpose of introducing the vocabulary of Mathematical Optimization Modeling. In future posts I will work more complex problems which will have interesting characteristics.&lt;/p&gt;
&lt;h2 id=&#34;the-food-truck-problem&#34;&gt;The Food Truck Problem&lt;/h2&gt;
&lt;p&gt;One of the example problems I like to use is that of a Food Truck. I am from Portland, OR USA originally and we had food trucks everywhere. In this example we are running a food truck and we have to decide what items to pack for the day. We sell Hamburgers and Burritos. Hamburgers sell for \$5.00 and Burritos sell for \$7.50 (they are big Burritos). Each Hamburger requires us to carry 1.0 Lb. of ingredients on the truck and each Burrito requires 1.5 Lbs. (I told you they are big). We have a small Food Truck so we can only carry up to 650 Lbs. of ingredients. We also forgot to go to stock up the day before so we only have 200 Hamburger buns on hand and only 300 tortillas for Burritos. Since we run an awesome Food Truck, we always sell out of everything we bring. The question now becomes, how much Hamburgers do we pack for and how many Burritos so that we maximize our profit?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This example problem is meant to be simple. I am mostly concerned with introducing the vocabulary of Optimization Modeling. Future problems will be more complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This problem is a clear example of a Mathematical Optimization Problem. It has a Quantifiable Objective, Maximize Revenue. It has Decisions which we can control: the number of Hamburgers and Burritos we will pack for. Finally it has rules we must follow, the Food Truck can only carry 650 Lbs, we only have 200 Hamburger Buns and we only have 300 tortillas for Burritos. Now, I am going to show you how we formulate this as an Optimization Model and then I will walk through each piece so that it makes sense. For this model I am going to use the variable $x_{1}$ to represent the number of Hamburgers we are going to pack for and $x_{2}$ to represent the number of Burritos.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;\text{Maximize: }5.00 x_{1} + 7.50 x_{2} \\ 
&amp;amp;\text{Subject to:} \\&lt;br&gt;
\end{align}
$$
$$
\begin{align}
x_{1} \leq&amp;amp; 200 \\&lt;br&gt;
x_{2} \leq&amp;amp; 300 \\&lt;br&gt;
1.0x_{1} + 1.5x_{2}\leq&amp;amp; 650 \\&lt;br&gt;
x_{1}, x_{2} \geq&amp;amp; 0
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s unpack this. The first line of any Mathematical Optimization Model is going to be the Objective Function. This is the function which is used to quantify success. It will start with whether we are trying to Maximize the value of the Objective Function or Minimize it. In this case we are trying to Maximize. The formula that you see is the calculation for Revenue. Remember, $x_{1}$ is the number of Hamburgers and $x_{2}$ is the number of Burritos. For every Hamburger we will earn \$5.00 and for each Burrito we will earn \$7.50. This means to calculate the total revenue we multiply the number of Hamburgers by the revenue per Hamburger and the number of Burritos by the revenue per Burrito: $5.00x_{1} + 7.50x_{2}$.&lt;/p&gt;
&lt;p&gt;After the Objective Function we get to a section referred to as the Constraints. This section typically begins with either a &amp;ldquo;Subject to&amp;rdquo; or just &amp;ldquo;S.t.&amp;rdquo; as a shorthand. This section is describing the rules that we need to follow. The first constraint is our limitation on the number of Hamburgers due to the number of buns that we have. We only have 200 buns available which means that $x_{1}$ must be less than or equal to 200. We write that as a constraint in this way: $x_{2} \leq 200$. The next constraint is describing our limit on the number of Burritos we could pack since we only have 300 tortillas. $x_{2}$ represents the number of Burritos we plan to pack and it must be less than 300 therefore we add this constraint: $x_{2} \leq 300$.&lt;/p&gt;
&lt;p&gt;The third constraint represents the weight limit of our Food Truck. We can only carry 650 Lbs. so the combination of the number of Hamburgers and the number of Burritos must be less than this. We multiply the number of Hamburgers by the lbs per Hamburger and the number of Burritos by the lbs per Burrito and add them together to get the total weight. That total must be less than the capacity of the Food Truck. This gives us this constraint: $1.0x_{1} + 1.5x_{2} \leq 650$.&lt;/p&gt;
&lt;p&gt;The final line of the model states the number of Hamburgers and Burritos cannot be less than zero. This is implicitly obvious to us as people but a Solver won&amp;rsquo;t have our context so we have to tell it that those numbers cannot be negative. This is where we are brining our added context to the problem.&lt;/p&gt;
&lt;h2 id=&#34;to-the-code&#34;&gt;To the Code&lt;/h2&gt;
&lt;p&gt;Now that we have walked through this small problem, let&amp;rsquo;s see how it translates to code. I am using Python 3.8 and PuLP 1.6.8. The first thing we do is import &lt;code&gt;PuLP&lt;/code&gt; and create a new instance of a &lt;code&gt;problem&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Import the PuLP Library&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pulp &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create an instance of a Problem object to populate&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LpProblem(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Food Truck&amp;#34;&lt;/span&gt;, LpMaximize)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PuLP&lt;/code&gt; provides us the tools we will need to create the Optimization Model and then solve it. Out of the box the &lt;code&gt;PuLP&lt;/code&gt; library comes with some open source solvers so you can build and solve models without having to purchase a solver license.&lt;/p&gt;
&lt;p&gt;The first argument of the &lt;code&gt;LpProblem&lt;/code&gt; function is the name of our problem. The second is the type of optimization we want to perform, Maximization or Minimization. In this case we are wanting to maximize revenue so we use the argument value of &lt;code&gt;LpMaximize&lt;/code&gt;. If we wanted to minimize we could have used the &lt;code&gt;LpMinimize&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s create some decision variables to represent how many burgers and tacos we are going to bring on our food truck. We do this by using the &lt;code&gt;LpVariable&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LpVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;burgers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LpVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tacos&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arguments for &lt;code&gt;LpVariable&lt;/code&gt; are the name of the variable and the lower bound on the possible value. In some problems, the decision variables can take on negative numbers. In this case, having negative tacos or negative hamburgers does not make any sense so we specifiy that the lower bound is 0.&lt;/p&gt;
&lt;p&gt;We now have the Decision Variables for the problems so we can now add the Objective Function and the Constraints. Let&amp;rsquo;s start with adding the Objective Function. Whenever we want to add something to a &lt;code&gt;problem&lt;/code&gt; we use the &lt;code&gt;+=&lt;/code&gt; operator. The &lt;code&gt;PuLP&lt;/code&gt; library will infer whether we are adding an Objective Function or a Constraint based on the right hand side argument. All we need to do for the Objective Function is to provide the equation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add the Objective Function&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7.50&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;problem&lt;/code&gt; object now has an Objective Function. Now let&amp;rsquo;s go about adding the constraints. The first constraint is the &lt;strong&gt;Max Burgers&lt;/strong&gt; constraint. To do this we use the &lt;code&gt;+=&lt;/code&gt; operator to add constraints to our &lt;code&gt;problem&lt;/code&gt; object. We then give the equation for the constraint and the name of the constraint.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add Max Burgers constraint&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Max Burgers&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then need to add the &lt;strong&gt;Max Burritos&lt;/strong&gt; constraint.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add Max Burritos Constraint&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Max Burritos&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we need the &lt;strong&gt;Max Weight&lt;/strong&gt; constraint.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add Max Weight Constraint&lt;/span&gt;
problem &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;650&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Max Weight&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have a fully populated problem. To solve it, all we need to do is call the &lt;code&gt;solve()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Solve the problem&lt;/span&gt;
problem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get a numeric response back but it will not mean much until we translate it to something we can understand. Fortunately, the &lt;code&gt;PuLP&lt;/code&gt; library has a dictionary which stores the mapping from the numeric status of the problem to a human readable string. This dictionary is the &lt;code&gt;LpStatus&lt;/code&gt; dictionary. Let&amp;rsquo;s use this to print out the string representation of the problem status.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Print the problem status&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LpStatus[problem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status])
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Optimal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We should see the string &lt;code&gt;optimal&lt;/code&gt;. This means that the solver was able to find the optimal answer. In the future we will go over the other possible statuses and what they mean.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at what values for the Decision Variables the Solver chose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Loop through each of the Decision Variables in the problem&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; problem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;variables():
    &lt;span style=&#34;color:#75715e&#34;&gt;# Print the name of the Variable and the Value the Solver chose&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(v&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;,v&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;varValue)

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; burgers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200.0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; tacos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see what kind of Revenue we should expect if we follow this plan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get the expected Revenue&lt;/span&gt;
revenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value(problem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objective)

&lt;span style=&#34;color:#75715e&#34;&gt;# Print the expected result&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${revenue:,.2f}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;250.00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There you have it. A tiny Mathematical Optimization problem. Granted, this was completely overkill for such a simple problem. My goal was to introduce these concepts and start growing our vocabulary around Optimization. From here we will adjust how we are managing the data and Decision Variables for our problem. This approach will not scale. In the next post we will look at adding the concept of Sets and Parameters. This will make it easy for us to create large optimization problems involving hundreds of thousands, if not millions of Decision Variables and Constraints.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Discrete Optimization with Cutting Planes</title>
<link>https://matthewcrews.com/blog/2018/2018-05-24-discrete-optimization-with-cutting-planes/</link>
<pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-05-24-discrete-optimization-with-cutting-planes/</guid>
<description>&lt;p&gt;Previously I described how we can perform Discrete Optimization using the Branch and Bound technique. Today I want to describe another foundational technique for Discrete Optimization, Cutting Planes. Cutting Planes is like the Branch and Bound technique in that it uses a series of LP Relaxations to search for solutions. Where it is different from Branch and Bound is in how it refines the LP Formulations. Branch and Bound would subdivide the solution space by branching on a decision variable and creating two new subproblems. Instead, what Cutting Planes does is iteratively add constraints which eliminate the nonintegral solutions from the feasible space while not eliminating any feasible integral solutions. These constraints that we add are called &amp;ldquo;Cuts&amp;rdquo; because they are cutting off nonintegral solutions from the feasible space.&lt;/p&gt;
&lt;h2 id=&#34;the-cutting-planes-algorithm&#34;&gt;The Cutting Planes Algorithm&lt;/h2&gt;
&lt;p&gt;Conceptually the Cutting Plane Algorithm is rather simple. It is made up of the following three steps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Solve the LP Relaxation of the Current Problem&lt;/li&gt;
&lt;li&gt;Step 2: Check if the integrality requirements of the initial problem have been met. If so, terminate, an optimal solution has been found. If integrality has not been achieved proceed to Step 3.&lt;/li&gt;
&lt;li&gt;Step 3: Add a constraint to the problem which removes the current optimal solution from the feasible space but does not eliminate any of the integer feasible solutions. Return to Step 1&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Obviously you need to check for infeasibility and unboundedness as well. If either one of those conditions arise, terminate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is really all there is to this algorithm. The art is in Step 3, generating cuts. A good cut will accelerate the convergence toward an integral solution. Part of the challenge is that there are frequently an infinite number of cuts which could work to reduce the size of the solution space while not eliminating integer feasible solutions. The trick then becomes finding good cuts quickly. Searching for the best cut is in of itself an optimization problem. We cannot afford to spend an infinite amount of time searching for the best cut though. There are recipes for being able to calculate good cuts quickly. We will go over some of them in a future post. For now, let&amp;rsquo;s walk through a graphical example of how Cutting Planes works.&lt;/p&gt;
&lt;h2 id=&#34;graphical-walkthrough&#34;&gt;Graphical Walkthrough&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say that we have a Discrete Optimization problem with two constraints, Constraint A and Constraint B. These two constraints define a space in which the solution must lie. Our decision variables are $x_1$ and $x_2$. For this scenario they are integer decision variables. Here is a quick sketch of the example problem.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2018-05-25-11-48-53.png&#34; alt=&#34;Initial LP&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is just a conceptual walkthrough of Cutting Planes so don&amp;rsquo;t fret about exactly what the numbers are. The dotted grey lines are the boundaries of the constraints. The blue dots indicate the integer feasible solutions and the green arrow is the direction in which the objective function is pointing (the direction of greatest improvement). If we take the LP Relaxation of this problem the optimum would be at the intersection of Constraint A and Constraint B. In the following image this point is indicated by the green dot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2018-05-25-11-49-17.png&#34; alt=&#34;Solution to Initial LP&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have labeled the solution to this initial LP $Z_{LP}^{0}$ . The superscript indicates which iteration this is the solution to and the $LP$ subscript indicates it is a solution to the LP Relaxation. We check if the integrality requirements of the original problem have been met. They have not since the optimal solution to the LP does not lie on integer values for $x_1$ and $x_2$. Now we need to generate a new constraint that we can add to the problem which removes $Z_{LP}^{0}$ from the feasible space but does not eliminate any of the integer feasible solutions (the blue dots).&lt;/p&gt;
&lt;p&gt;Later we will go over some methods for calculating these constraints. For now let&amp;rsquo;s just use visual analysis. One of the easiest constraints that we can add is $x_2 \leq 4$. It removes $Z_{LP}^{0}$ from the feasible space but does not cut off any of our integer feasible solutions. Let&amp;rsquo;s add this constraint and redraw our problem. Let&amp;rsquo;s draw the new constraint as a yellow dotted line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2018-05-25-11-49-50.png&#34; alt=&#34;Solution to LP^1&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have taken the liberty of marking the new solution $Z_{LP}^{1}$ on the diagram. The good news is that now $x_2$ has taken on an integer value but $x_1$ has not. $x_1$ lies between $2$ and $3$ so we need to add another constraint. Again we can just look at the problem and see we can add the constraint $x_1 + x_2 \leq 6$. This does not remove any integer feasible solutions but it will remove $Z_{LP}^{1}$ from the feasible space. Let&amp;rsquo;s add this constraint and see what we get.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://matthewcrews.com/img/2018-05-25-11-54-09.png&#34; alt=&#34;Solution to LP^2&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have added the constraint of $x_1 + x_2 \leq 6$ and found the new solution, $Z_{LP}^{2}$ . Our new solution $Z_{LP}^{2}$ lies on integral values of $x_1$ and $x_2$. We can now end our search since we have found a solution which meets the integrality requirements of the original problem. We have successfully used Cutting Planes to solve a Discrete Optimization problem!&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This walkthrough had some nice pictures but you should have this nagging question, &amp;ldquo;How do we generate these cuts?&amp;rdquo; In this problem it was easy to see which cuts were and were not feasible. We just chose some obvious ones based on what we could see. We need to be able to do this in much higher dimensionality though. Next time we will introduce some of the most common cuts and how we generate them. Today we just wanted to lay a conceptual foundation for how Cutting Planes worked. I hope you enjoyed the post and I always welcome feedback!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Discrete Optimization with Branch and Bound</title>
<link>https://matthewcrews.com/blog/2018/2018-05-22-discrete-optimization-with-branch-and-bound/</link>
<pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-05-22-discrete-optimization-with-branch-and-bound/</guid>
<description>&lt;p&gt;If you have spent any time with me you will know that I am passionate about Optimization. Now, you may pass this off as a bit of geekiness on my part but the reason I care about Optimization is that it has profound implications for how we care for people. When I get a moment to describe Optimization to someone the way I start off is by saying, &amp;ldquo;Optimization is the mathematics of caring for people.&amp;rdquo; If you care about making the world a better place for humanity, then you should care about Optimization.&lt;/p&gt;
&lt;p&gt;The difficulty is that Optimization is often shrouded in mystery due to the math. My hope in this series is to clarify the mathematics of Optimization and make it more approachable. This will be the resource I wish I had when going through school. My desire is that by the end of the series you will have a firmer footing as you begin to scale the beautiful heights of Optimization and you come to enjoy it as art and as a tool for serving others.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I am not putting these posts out in a particular order. Right now I am just writing on what I am researching currently. When the series is complete I will recompile them into a more sensible order. The field is vast so I may jump around as I focus on different areas in my professional life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;integer-and-mixed-integer-programming&#34;&gt;Integer and Mixed Integer Programming&lt;/h2&gt;
&lt;p&gt;Integer Programming (IP) and Mixed Integer Programming (MIP) both fall under the umbrella of Discrete Optimization since some or all of their decision variables must take on discrete values. They are amazing tools for mathematically modeling problems. By adding decision variables which must take on integer values we can describe complex logic in ways that Linear Programming (LP) cannot. The downside to this is that the problems are far more difficult to solve. Thankfully, there are a host of algorithms which can solve even incredibly large problems in a reasonable amount of time. The performance of these algorithms is highly dependent on the quality of the implementation though.&lt;/p&gt;
&lt;p&gt;One of the immediate challenges we face when trying to solve IP and MIP problems is that we cannot directly deal with the fact that some of the decision variables need to take on integral values. What most algorithms do is solve a Linear Programming relaxation of the original problem. The integral requirements of the decision variables is relaxed. This relaxed LP is solved and then constraints are added which force the integer decision variables to converge toward integral solutions. This means that we can really think of solving IP and MIP problems as recursively solving LPs where we add constraints at each recursive step. These first few posts will describe some of the algorithms in this family of solution techniques.&lt;/p&gt;
&lt;h2 id=&#34;branch-and-bound&#34;&gt;Branch and Bound&lt;/h2&gt;
&lt;p&gt;Branch and Bound is the most straightforward method of searching for IP/MIP solutions. We solve an initial LP Relaxation of the original problem. If we find a solution where some of the integer decision variables have taken on nonintegral values we select one to branch one, much like binary search. We end up creating two new subproblems, referred to as nodes in the search tree, which are copies of the original problem but each one has a new constraint which forces the variable we are branching on to take on an integral value.&lt;/p&gt;
&lt;p&gt;For example, if we solved the LP Relaxation and the decision variable $x_1 = 1.5$ but it is supposed to be integral we can branch on $x_1$. We do this by creating two new instances of the original problem but in one of the subproblems, or node in the search tree, we add the constraint $x_1 \leq1$ and in the other subproblem , or node, we add the constraint that $x_1 \geq 2$. These new problems will no longer allow $x_1$ to take on the value of $1.5$. We now solve these new problems (nodes) and add new constraints to force other nonintegral integer variables toward integral values.&lt;/p&gt;
&lt;p&gt;As we successively solve these subproblems (nodes) we may come across a solution where the integrality requirements are met. This is called the &lt;em&gt;incumbent solution&lt;/em&gt;. This solution represents the best feasible solution to our original problem we have found thus far. As we continue to search we may find a better solution which also meets the integrality requirements. This improved solution becomes the new &lt;em&gt;incumbent solution&lt;/em&gt;. Eventually we will prune all of the branches and the remaining &lt;em&gt;incumbent solution&lt;/em&gt; is the optimal solution for the original problem. Let&amp;rsquo;s walk through a more formal description of the algorithm.&lt;/p&gt;
&lt;h2 id=&#34;algorithm-description&#34;&gt;Algorithm Description&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s put together a rough outline of how the Brand and Bound algorithm works. For that we will need some parameters.&lt;/p&gt;
&lt;p&gt;$P =$ Our Initial Problem&lt;br&gt;
$P_{LP} =$ The LP Relaxation of our initial problem&lt;br&gt;
$z^\ast =$ The objective function value for $P_{LP}$&lt;br&gt;
$P^n =$ The $n^{th}$ subproblem of problem $P$&lt;br&gt;
$P^n_{LP} =$ The LP relaxation of the $P^n$ problem&lt;br&gt;
$z^n =$ The objective function value for the solution to $P^n$&lt;br&gt;
$z_{UB}^n =$ The best upper bound on the objective function for node $n$&lt;br&gt;
$z_{LB}^n =$ The best lower bound on the objective function for node $n$&lt;br&gt;
$Z_{UB} =$ The best upper bound for the objective function observed so far&lt;br&gt;
$Z_{LB} =$ The best lower bound for the objective function so far&lt;/p&gt;
&lt;h3 id=&#34;step-0-initialize-the-problem&#34;&gt;Step 0: Initialize the Problem&lt;/h3&gt;
&lt;p&gt;Create a LP Relaxation of the original problem, $P$, and solve it. We refer to this relaxed problem as $P_{LP}$ and it will be the initial node in our tree of nodes that we search. We attempt to solve $P_{LP}$ and check for one of the following conditions.&lt;/p&gt;
&lt;h4 id=&#34;infeasible&#34;&gt;Infeasible&lt;/h4&gt;
&lt;p&gt;If the problem is infeasible at this stage we are done. If there is no solution to the $P_{LP}$ there is no solution to the original problem $P$.&lt;/p&gt;
&lt;h4 id=&#34;unbounded&#34;&gt;Unbounded&lt;/h4&gt;
&lt;p&gt;If $P_{LP}$ has no bounds then we are done. The problem is unconstrained and therefore no optimal solution exists.&lt;/p&gt;
&lt;h4 id=&#34;integer-solution&#34;&gt;Integer Solution&lt;/h4&gt;
&lt;p&gt;All of the integeral requirements of $P$ have been met. We are done since the solution to $P_{LP}$ and $P$ is the same.&lt;/p&gt;
&lt;h4 id=&#34;fractional-solution&#34;&gt;Fractional Solution&lt;/h4&gt;
&lt;p&gt;Some number of the integer variables have taken on nonintegral. We set $Z_{UB} = z^\ast$ where $z^\ast$ is the objective value for the initial problem $P_{LP}$ and  $Z_{LB} = -\infty$. $Z_{LB} = -\infty$ is used to track what the best lower bound is for the original problem. We will use this value to prune nodes as we continue to search.&lt;/p&gt;
&lt;p&gt;Select one of the nonintegral decision variables and branch. To branch we create two new nodes from the parent problem $P$. We make a copy of $P$ but we add a constraint to the child nodes which will force the nonintegral variable toward and integral value.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that in $P$ $x_1$ is an integer decision variable. When we solve $P_{LP}$ we find that in the solution $x_1 = 1.5$. $x_1$ is supposed to take on an integral value so we decide to branch on this variable. We create a new child node $P^1$ which is the same as $P$ but with a new constraint $x_1 \leq 1$. The other child node we create is $P^2$ and is the same as $P$ but with the opposing constraint that $x_{1} \geq 2$. We add both of these child nodes to the Candidate List. We do not have an *incumbent solution* initially.&lt;/p&gt;
&lt;h3 id=&#34;step-1-select-a-node-from-the-candidate-list&#34;&gt;Step 1: Select a Node from the Candidate List&lt;/h3&gt;
&lt;p&gt;Now assuming that a feasible solution to $P$ was not found when we solved $P_{LP}$ then we need to choose a node to solve from the Candidate List. After Step 0 there will only be 2 nodes to the Candidate List but as we continue to iterate we will add more nodes in the Candidate List.&lt;/p&gt;
&lt;p&gt;Which node we choose to solve is an algorithm design decision. We could choose the node with the best lower bound or continue down the children of the  node we just solved. What some people do is do a depth first search to find a better $Z_{LB}$ to aid in pruning other nodes. The best choice is often problem dependent. Whatever strategy you employ, you will continue to evaluate nodes until the Candidate List has been emptied.&lt;/p&gt;
&lt;p&gt;If at any point we arrive at Step 1 and find there are no nodes in the Candidate List yet have an &lt;em&gt;incumbent solution&lt;/em&gt; we terminate the algorithm and declare the &lt;em&gt;incumbent solution&lt;/em&gt; to be the optimal.&lt;/p&gt;
&lt;h3 id=&#34;step-2-solve-the-lp-relaxation-of-the-nth-node&#34;&gt;Step 2: Solve the LP Relaxation of the $n^{th}$ node&lt;/h3&gt;
&lt;p&gt;Based on whatever node selection rule we used in Step 1 we have chosen to solve the $P^n$ node. When you solve the LP Relaxation of the given node, $P_{LP}^n$, you will find $z^n$ which is the objective function value for $P_{LP}^n$. We then update $z_{UB}^n = z^n$. This represents the best possible objective function that could be achieved by the children of this node.&lt;/p&gt;
&lt;h3 id=&#34;step-3-check-for-infeasibility&#34;&gt;Step 3: Check for Infeasibility&lt;/h3&gt;
&lt;p&gt;If while solving $P_{LP}^n$ you find the solution is infeasible you can &amp;ldquo;prune&amp;rdquo; this branch. None of the children of this node will be feasible either so there is no point in continuing to search down this branch.&lt;/p&gt;
&lt;h3 id=&#34;step-4-check-against-z_lb&#34;&gt;Step 4: Check against $Z_{LB}$&lt;/h3&gt;
&lt;p&gt;If $z^n \leq Z_{LB}$ we can prune this branch. If we are on the first iteration of the problem though $Z_{LB} = -\infty$ so no node will be eliminated by this check. In Step 5 we update this value so eventually it will be an effective means of guiding our search down the tree.&lt;/p&gt;
&lt;p&gt;Now, why can we prune based on $z^n \leq Z_{LB}$ you may ask. This is because we know that there is another branch which guarantees better solutions than the current branch. There is no point in us spending time searching down this branch because we already know we can do just as well if not better searching a somewhere else. If we have not pruned based on this test proceed to Step 5 or Step 6 depending on the condition of the solution.&lt;/p&gt;
&lt;h3 id=&#34;step-5-check-for-integrality&#34;&gt;Step 5: Check for Integrality&lt;/h3&gt;
&lt;p&gt;If the solution to $P_{LP}^n$ meets the integrality requirements of $P$ we have found a feasible solution. We store this new *incumbent solution* and update the value of $Z_{LB} = z^n$ if $Z_{LB} &amp;lt; z^n$. Again, $z^n$ is the value of the objective function for $P_{LP}^n$ which is the node we just solved. We prune this branch since it will not be possible to find a better solution. We then return to Step 1.&lt;/p&gt;
&lt;h3 id=&#34;step-6-branch-the-solution&#34;&gt;Step 6: Branch the Solution&lt;/h3&gt;
&lt;p&gt;If we have reached this step there are still nonintegral values for the integer decision variables so we must branch the current node $P^n$. From here we select a nonintegral decision variable to branch on and create two child nodes and add them to the Candidate List.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s say that $x_2$ is an integer decision variable in problem $P$ but in the current solution, $P_{LP}^n$, we find $x_2=4.5$. We decide to branch on this decision variable since we need it to take on an integral value. We will create two new problems which are the same as our current problem $P^n$ but each has a new constraint forcing $x_2$ toward an integral value. One of the child nodes will have the constraint $x_2 \leq 4$ and the other node will have the constraint $x_2 \geq 5$. Both of these new nodes are added to the Candidate List. Loop back to Step 1 and continue.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this post I have given a quick overview of the Branch and Bound algorithm for solving IP and MIP problems. While there may be a lot of terminology the whole thing boils down to what is essentially a binary search with some rules for eliminating branches. Branch and Bound is a foundational technique for solving this class of problems. More advanced methods typically take the framework of Branch and Bound and add additional steps for speeding up convergence and strengthening bounds. In my next post I hope to provide some worked examples to illustrate how this technique works.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Creating Summable Domain Types</title>
<link>https://matthewcrews.com/blog/2018/2018-05-13-creating-summable-domain-types/</link>
<pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-05-13-creating-summable-domain-types/</guid>
<description>&lt;p&gt;One of the reasons that I love F# is that is makes it incredibly easy to model domains. By creating a Domain Model which represents the business domain it becomes relatively easy to create workflows and algorithms which streamline business processes. In this post I show how to create types for a domain which are summable, a feature I use frequently in my work.&lt;/p&gt;
&lt;h2 id=&#34;the-value-of-restricting-values&#34;&gt;The Value of Restricting Values&lt;/h2&gt;
&lt;p&gt;When I have to create a new Domain Model one of the first things that I do is define a single case Discriminated Union of &lt;code&gt;decimal&lt;/code&gt; for the basic building blocks that I am going to work with (Costs, Items, Sales Rates, Days of Inventory, etc.). For example, when I am creating an algorithm to evaluate the financial viability of a product on marketplaces I have to calculate costs, I therefore create a &lt;code&gt;Cost&lt;/code&gt; type. In my domain, a &lt;code&gt;Cost&lt;/code&gt; is never negative therefore I can create a constructor which will enforce this behavior.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cost &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Define a single case DU &amp;#39;Cost&amp;#39; for decimal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; create c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Function for creating &amp;#39;Cost&amp;#39; values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 0M &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Check that the value is greater than 0.0M
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            None           &lt;span style=&#34;color:#75715e&#34;&gt;// Return None if outside bounds
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            Some&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cost c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Return input wrapped in a &amp;#39;Cost&amp;#39; value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The beautiful thing about this is that when I am working with a &lt;code&gt;Cost&lt;/code&gt; type I never have to worry about it being negative. This is a powerful thing when it comes to composing algorithms because I have eliminated a whole host of possible values that I would need to handle. It is amazing how easy it is for a negative numbers to sneak in and cause havoc. I force myself to deal with this bad data at the boundary of the domain instead of inside the algorithm performing the analysis.&lt;/p&gt;
&lt;h2 id=&#34;the-downside-where-did-addition-go&#34;&gt;The Downside: Where Did Addition Go?&lt;/h2&gt;
&lt;p&gt;There is a downside to doing this though, basic math operations will not work. At this point if I try to add two different &lt;code&gt;Cost&lt;/code&gt; values I will get a compiler error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; totalCost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cost1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cost2 &lt;span style=&#34;color:#75715e&#34;&gt;// Error: The type &amp;#39;Cost&amp;#39; does not support the &amp;#39;+&amp;#39; operator
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fortunately this is easy to overcome. All we need to do is implement the &lt;code&gt;+&lt;/code&gt; operator for the type. We do this by adding a &lt;code&gt;static member&lt;/code&gt; to our type alias. We add the keyword &lt;code&gt;with&lt;/code&gt; to the end of our previous type alias definition and provide the &lt;code&gt;+&lt;/code&gt; static member.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Updated definition of &amp;#39;Cost&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cost &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(+)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cost c1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Cost c2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Cost &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arguments for the &lt;code&gt;+&lt;/code&gt; function may look a little odd so let me explain. By declaring the arguments of the function as &lt;code&gt;(Cost c1, Cost c2)&lt;/code&gt; I am telling the compiler that I expect a &lt;code&gt;Cost&lt;/code&gt; type as the input and I want you to unpack the value inside of &lt;code&gt;Cost&lt;/code&gt; and put it in the &lt;code&gt;c1&lt;/code&gt; and &lt;code&gt;c2&lt;/code&gt; values respectively. This allows me to work with the &lt;code&gt;decimal&lt;/code&gt; values inside of the &lt;code&gt;Cost&lt;/code&gt; type. The function itself adds the two values together and then wraps the result in a &lt;code&gt;Cost&lt;/code&gt;. Now when we go to add two &lt;code&gt;Cost&lt;/code&gt; values we no longer get an error.&lt;/p&gt;
&lt;p&gt;The beauty of this is that I have maintained control over the values that &lt;code&gt;Cost&lt;/code&gt; can take on. I declared a &lt;code&gt;create&lt;/code&gt; function which insures positive values. I only allow addition of &lt;code&gt;Cost&lt;/code&gt; types which means that a &lt;code&gt;Cost&lt;/code&gt; will only ever be positive. Some people may brush this off as trivial but as someone who has seen the damage that can happen from values going outside of the expected range, this extra work for reliability and peace of mind is worth it. For me, it is more efficient to ensure values cannot go outside their allowed bounds through controlling construction and operator definitions than to have value checks all over the place.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; totalCost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cost1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cost2
&lt;span style=&#34;color:#75715e&#34;&gt;// Result: val totalCost : Cost = Cost 15.0M
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enabling-summation&#34;&gt;Enabling Summation&lt;/h2&gt;
&lt;p&gt;Well, that is great and all but what happens when we have a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Cost&lt;/code&gt; values and we want to sum them. What happens then?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sumCosts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;cost1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; cost2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sum &lt;span style=&#34;color:#75715e&#34;&gt;// Error: The type &amp;#39;Cost&amp;#39; does not support the operator &amp;#39;get_Zero&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when I first came across this I was confused. I had no idea what this &lt;code&gt;get_Zero&lt;/code&gt; operator meant. After digging around for a while I was able to find some examples of what it was referring to. The &lt;code&gt;sum&lt;/code&gt; function wants a starting point for the summation and it gets that by calling the &lt;code&gt;Zero&lt;/code&gt; function on the type. I don&amp;rsquo;t know why the compiler is saying &lt;code&gt;does not support the operator &#39;get_Zero&#39;&lt;/code&gt; instead of saying &lt;code&gt;the type does not have a function named &#39;Zero&#39;&lt;/code&gt;. Again, F# makes this easy to implement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Summable &amp;#39;Cost&amp;#39; type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cost &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(+)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cost c1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Cost c2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Cost &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; Zero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        Cost 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0M
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we try to sum a list of &lt;code&gt;Cost&lt;/code&gt; values we get the expected result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sumCosts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;cost1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; cost2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; List.sum
&lt;span style=&#34;color:#75715e&#34;&gt;// Result: val sumCosts : Cost = Cost 15.0M
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;freedom-through-constraints&#34;&gt;Freedom Through Constraints&lt;/h2&gt;
&lt;p&gt;The more I dive into Domain Driven Design with F#, the more I love it. By ensuring values comply with expectations at the boundary of the domain, I am freed to reason about my algorithms without worrying about data going awry inside the domain. While it takes a few more keystrokes to define operations on these domain types, I hope that I showed you that it takes little effort in F# and can lead to more reliable and robust code. Keep calm and curry on!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>F# for Optimization Modeling</title>
<link>https://matthewcrews.com/blog/2018/2018-05-04-fsharp-for-optimization-modeling/</link>
<pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-05-04-fsharp-for-optimization-modeling/</guid>
<description>&lt;p&gt;I recently attended a training event hosted by Gurobi. For those who don&amp;rsquo;t know, Gurobi produces one of the best mathematical solvers in the industry. It was a great event and we were able to spend ample time with engineers and experts in the field.&lt;/p&gt;
&lt;p&gt;Using a mathematical solver requires the ability to formulate models and at this time one of the easiest languages for doing that is Python. Python is a great language for many use cases. One is providing a quick and easy means of formulating models that can then be fed to a solver. I was able to spend some time with one of the engineers who implemented Gurobi&amp;rsquo;s Python library, &lt;code&gt;gurobipy&lt;/code&gt;. He pointed to the formulation of the &lt;code&gt;netflow&lt;/code&gt; problem as an example of how terse and concise Python could be for modeling.&lt;/p&gt;
&lt;p&gt;Since I love F#, I naturally wanted to see if I could accomplish the same thing using F#. What started as a silly proof of concept is slowly turning into a more full fledged library for wrapping the Gurobi .NET library in a functional F# wrapper. Below I give an example of how the power of functions in F# allows us to nearly duplicate the functionality of Python. The library I am working on can be &lt;a href=&#34;https://github.com/matthewcrews/fsharp-gurobi-test&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt; I am not saying one language is better than another. I merely like to challenge myself with formulating ideas in different languages. It forces me to translate across paradigms which I find a useful exercise for the mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;netflow-example&#34;&gt;Netflow Example&lt;/h2&gt;
&lt;p&gt;The following shows an example of a network flow problem provided by Gurobi and modeled in Python. The full formulation can be &lt;a href=&#34;http://www.gurobi.com/documentation/8.0/examples/netflow_py.html&#34;&gt;found here&lt;/a&gt;. In this example I am just comparing and contrasting the Python and F# constraint formulation methods.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/em&gt;: All Python code is copyrighted by Gurobi Optimization, LLC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;creating-a-model&#34;&gt;Creating a Model&lt;/h3&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;p&gt;In Python the creation of the model and decision variables is quite straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Copyright 2018, Gurobi Optimization, LLC&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create optimization model&lt;/span&gt;
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;netflow&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Create variables&lt;/span&gt;
flow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addVars(commodities, arcs, obj&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cost, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flow&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;with-gurobifsharp&#34;&gt;With Gurobi.Fsharp&lt;/h4&gt;
&lt;p&gt;In F# we have a similar syntax but instead of &lt;code&gt;flow&lt;/code&gt; being a &lt;code&gt;Dictionary&lt;/code&gt; of decision variables indexed by tuples, we produce a &lt;code&gt;Map&amp;lt;string list, GRBDecVar&amp;gt;&lt;/code&gt; which is essentially the same for our purposes. I am using &lt;code&gt;string list&lt;/code&gt; as the index instead of tuples because we need an indexer which has dynamic length. I could do it with tuples but it would be less straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create a new instance of the Gurobi Environment object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// to host models
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create: GRBEnv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Environment.create

&lt;span style=&#34;color:#75715e&#34;&gt;// Create a new model with the environment variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create: env:GRBEnv -&amp;gt; name:string -&amp;gt; GRBModel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model.create env &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;netflow&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Create a Map of decision variables for the model
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// addVarsForMap: model:GRBModel -&amp;gt; lowerBound:float -&amp;gt; upperBound:float -&amp;gt; varType:string -&amp;gt; indexMap:Map&amp;lt;&amp;#39;a,float&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; flow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model.addVarsForMap m 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;0 INF CONTINUOUS costs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of using the methods on the object, functions have been provided which operate on the values that are passed in. This is more idiomatic for F#. The &lt;code&gt;Model&lt;/code&gt; module in the library hosts all of the functions for working with objects of type &lt;code&gt;Model&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Model.adddVarsForMap&lt;/code&gt; function takes a &lt;code&gt;Map&amp;lt;string list, float&amp;gt;&lt;/code&gt; and produces a &lt;code&gt;Map&amp;lt;string list, GRBDecVar&amp;gt;&lt;/code&gt; for the modeler to work with. This is similar to how the Python tuples are working in the &lt;code&gt;gurobipy&lt;/code&gt; library. Instead of indexing into a Python dictionary with &lt;code&gt;tuples&lt;/code&gt;, F# uses a &lt;code&gt;string list&lt;/code&gt; as the index.&lt;/p&gt;
&lt;h3 id=&#34;adding-constraints&#34;&gt;Adding Constraints&lt;/h3&gt;
&lt;h4 id=&#34;python-1&#34;&gt;Python&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;gurobipy&lt;/code&gt; library offers a succinct way of expressing a whole set of constraints by using generators. There is additional magic going on under the hood though that may not be obvious at first. The following method generates a set of constraints for each element in &lt;code&gt;arcs&lt;/code&gt; but also creates a meaningful constraint name. The prefix for the constraint name is the last argument of the method (&lt;code&gt;&amp;quot;capacity&amp;quot;&lt;/code&gt; in this instance).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Arc capacity constraints&lt;/span&gt;
capacityConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addConstrs(
        (flow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,i,j) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; capacity[i,j] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arcs), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capacity&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also special sauce occuring in the &lt;code&gt;flow.sum(&#39;*&#39;,i,j)&lt;/code&gt; syntax. &lt;code&gt;flow&lt;/code&gt; is a dictionary which is indexed by a 3 element tuple. What this &lt;code&gt;sum()&lt;/code&gt; method is doing is summing across all elements in the dictionary which fit the pattern. The &lt;code&gt;*&lt;/code&gt; symbol is a wildcard and will match against any element. This is a powerful way to sum across dimensions of the optimization model.&lt;/p&gt;
&lt;h4 id=&#34;with-gurobifsharp-1&#34;&gt;With Gurobi.Fsharp&lt;/h4&gt;
&lt;p&gt;In F# we can do something similar but instead of having a generator we pass in a lambda to create the constraints. The sinature of this function for creating the constraint set is: &lt;code&gt;model-&amp;gt;string-&amp;gt;string list-&amp;gt;(Map&amp;lt;string list, Gurobi.GRBConstr)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// addConstrs: model:GRBModel -&amp;gt; setName:string -&amp;gt; setIndexes: string list list -&amp;gt; constraintFunc:(string list -&amp;gt; ConstraintTuple) -&amp;gt; Map&amp;lt;string list, GRBConstr&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; capacityConstraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    Model.addConstrs m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capacity&amp;#34;&lt;/span&gt; arcs
        &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum flow &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; capacity&lt;span style=&#34;color:#f92672&#34;&gt;.[[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;]]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function &lt;code&gt;Model.addConstrs&lt;/code&gt; takes a &lt;code&gt;model&lt;/code&gt; object as its first argument (&lt;code&gt;m&lt;/code&gt; in this case), the prefix for what the constraints are going to be named (&lt;code&gt;&amp;quot;capacity&amp;quot;&lt;/code&gt; in this case), and the set of indices the constraints will be created over, &lt;code&gt;arcs&lt;/code&gt; in this case. The key point is that the types of the indices must match the input type of the lambda.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;addConstrs&lt;/code&gt; function will iterate through each of the indices in the set, create a constraint from the lambda that was passed, and name the constraint appropriatly. If the first element of the &lt;code&gt;arcs&lt;/code&gt; set was &lt;code&gt;[&amp;quot;Detroit&amp;quot;; &amp;quot;Boston&amp;quot;]&lt;/code&gt; then the name of the first constraint would be &lt;code&gt;capacity_Detroit_Boston&lt;/code&gt;. This helps the modeler by maintaining a consistent naming scheme for the constraints in the model.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Domains Run Amok</title>
<link>https://matthewcrews.com/blog/2018/2018-01-27-domains-run-amok/</link>
<pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-01-27-domains-run-amok/</guid>
<description>&lt;p&gt;I am a huge fan of Domain Driven Design and I have been trying to apply it more and more. I ran into a problem last week that kept beating me over the head though. I kept using a bottom up approach and kept coming up with terrible solutions. Finally, I took a more outside to in approach which cleaned up the solution. I credit &lt;a href=&#34;http://blog.ploeh.dk/&#34;&gt;Mark Seemann&lt;/a&gt; for the idea to work from the outside in. I am wanting to show some of the difficulties you can run into using a bottom up approach so that others don&amp;rsquo;t make the same mistakes that I did. Hopefully this little exercise helps provide others some guidance on how to get unstuck when attempting Domain Driven Design.&lt;/p&gt;
&lt;h2 id=&#34;our-refactoring-problem&#34;&gt;Our Refactoring Problem&lt;/h2&gt;
&lt;p&gt;I have a project where we are rebuilding how we calculate the replenishment logic for our Supply Chain. Replenishment is the process of ordering product from Vendors for your Warehouses so that we can fill customer orders. I work for an e-commerce company so Replenishment is at the heart of what we do.&lt;/p&gt;
&lt;p&gt;The current solution is a monolith application which is all fed from an Azure SQL instance. It is comprised of a large set of batch process that run in order and populate tables in the database. This mess was inherited from an old system and has been warped beyond comprehension at this point. It is so fragile we don&amp;rsquo;t dare touch it. The plan is to decompose the monolith into separate services which communicate via messages. To do this though, we need to create those separate services. At the heart of one of those services is the analysis of Time Series data. This is my attempt to create a tiny little domain for modeling this analysis and the mistakes I made along the way.&lt;/p&gt;
&lt;h2 id=&#34;modeling-timeseries-take-1-from-the-bottom-up&#34;&gt;Modeling TimeSeries Take 1: From the Bottom Up&lt;/h2&gt;
&lt;p&gt;All of our Replenishment logic is built on analyzing Time Series data. This data can be thought of as a array of tuples where one value is the timestamp and the other is the observed value, &lt;code&gt;DateTimeOffset * &#39;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What I set out to do is create a domain model that allows us to analyze these Time Series in a robust and performant way. My initial thought was, &amp;ldquo;I know that my data will always be &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; so I can think of an &lt;code&gt;ObservedValue&lt;/code&gt; in my Time Series as a Discriminated Union and an &lt;code&gt;Observation&lt;/code&gt; is a record with a &lt;code&gt;DateTimeOffset&lt;/code&gt; and an &lt;code&gt;ObservedValue&lt;/code&gt;. A &lt;code&gt;TimeSeries&lt;/code&gt; is just an array of the type &lt;code&gt;Observation&lt;/code&gt;. When I am done with an analysis the result will be either &lt;code&gt;decimal&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; so I&amp;rsquo;ll define an &lt;code&gt;AnalysisResult&lt;/code&gt; type to contain the result.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObservedValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Decimal &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    DateTime &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DateTimeOffset
    Value &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ObservedValue
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeSeries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnalysisResult&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Decimal &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This doesn&amp;rsquo;t seem bad so far. Now I need to add some basic functions for analyzing my &lt;code&gt;TimeSeries&lt;/code&gt;. Some simple and obvious ones are &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, and &lt;code&gt;last&lt;/code&gt;. There are actually many functions I will need but these will suffice to make my point. I now try to write these simple functions for my &lt;code&gt;TimeSeries&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private create observedType t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        t
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;DateTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; observedType v&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.toArray

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fromDecimal s &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        create ObservedValue.Decimal s

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fromString s &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        create ObservedValue.String s

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts&lt;span style=&#34;color:#f92672&#34;&gt;.[-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.averageBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Error: The type ObservedValue does not support the operator &amp;#39;+&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have encountered my first problem with this approach. I want to be able to take the &lt;code&gt;mean&lt;/code&gt; of my &lt;code&gt;TimeSeries&lt;/code&gt; but the &lt;code&gt;ObservedValue&lt;/code&gt; type does not support the &lt;code&gt;+&lt;/code&gt; operator. I think, &amp;ldquo;No problem, I&amp;rsquo;ll just add the &lt;code&gt;+&lt;/code&gt; operator.&amp;rdquo; I then look at the type again and realize I may be doing something wrong. Adding a &lt;code&gt;decimal&lt;/code&gt; to a &lt;code&gt;decimal&lt;/code&gt; makes sense and I also understand adding &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt; but this is going to require me to have a &lt;code&gt;+&lt;/code&gt; defined for &lt;code&gt;decimal&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;decimal&lt;/code&gt;. That does not make any sense.&lt;/p&gt;
&lt;h2 id=&#34;modeling-timeseries-take-2-homogenous-values&#34;&gt;Modeling TimeSeries Take 2: Homogenous Values&lt;/h2&gt;
&lt;p&gt;My problem is that I am allowing a single &lt;code&gt;TimeSeries&lt;/code&gt; to be heterogenous, containing both &lt;code&gt;decimal&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; values. Really a single &lt;code&gt;TimeSeries&lt;/code&gt; needs to be homogeneous, containing only &lt;code&gt;decimal&lt;/code&gt; or only &lt;code&gt;string&lt;/code&gt;. Okay, no problem! I&amp;rsquo;ll reformulate the domain to have the &lt;code&gt;TimeSeries&lt;/code&gt; be a Discriminated Union instead of the &lt;code&gt;ObservedValue&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; System

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    DateTime &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DateTimeOffset
    Value &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeSeries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Decimal &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnalysisResult&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Decimal &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s try to implement our analysis functions again. Don&amp;rsquo;t judge me for what you see next. Once I wrote it, I felt a little ill. I&amp;rsquo;ll go into why after the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private create observedType t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        t
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;DateTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.toArray
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; observedType

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fromDecimal t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        create TimeSeries.Decimal t

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fromString t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        create TimeSeries.String t

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private map df sf ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; ts &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; TimeSeries.Decimal t &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; df t
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; TimeSeries.String t &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; sf t

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value
        map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; AnalysisResult.Decimal&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; AnalysisResult.String&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ts

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.[-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value
        map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; AnalysisResult.Decimal&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; AnalysisResult.String&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ts

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
                t &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.averageBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.Decimal
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.String
        map df sf ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I will readily admit this is clunky. Let me explain the thought process. I know that the &lt;code&gt;TimeSeries&lt;/code&gt; type is a Discriminated Union and therefore I should have a &lt;code&gt;map&lt;/code&gt; like function for easily applying the correct function, depending on which value &lt;code&gt;TimeSeries&lt;/code&gt; takes on. In many cases I would use the exact same logic (Ex: &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt;) so I just defined a generic function and used that for both arguments of the &lt;code&gt;map&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;When I get to the &lt;code&gt;mean&lt;/code&gt; function I run into another problem. It does not make sense to take the &lt;code&gt;mean&lt;/code&gt; of a set of &lt;code&gt;string&lt;/code&gt; observations but the code allows it. In this code I am returning an empty &lt;code&gt;string&lt;/code&gt; but that is not in line with the heart of what I am going for. If something does not make sense, I don&amp;rsquo;t want to allow it. I want invalid states to be unrepresentable in the code. I don&amp;rsquo;t want myself or someone else to even be able to call &lt;code&gt;mean&lt;/code&gt; with a &lt;code&gt;TimeSeries&lt;/code&gt; containing &lt;code&gt;string&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s at this point I start to feel really dumb. How can this be so hard? Here is what I am wanting to accomplish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model a TimeSeries made up of either &lt;code&gt;decimal&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reuse function logic wherever I can (DRY principle)&lt;/li&gt;
&lt;li&gt;Prevent unrepresentable states&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modeling-timeseries-take-3-generic-timeseries&#34;&gt;Modeling TimeSeries Take 3: Generic TimeSeries&lt;/h2&gt;
&lt;p&gt;I would rather not admit how long I was stumped at this point. It felt like I was missing something glaringly obvious. I mulled on this problem for awhile until the next thought came to me, &amp;ldquo;What is really going on is that I have two special cases of &lt;code&gt;TimeSeries&amp;lt;&#39;a&amp;gt;&lt;/code&gt; here. I have a &lt;code&gt;TimeSeries&amp;lt;decimal&amp;gt;&lt;/code&gt; and a &lt;code&gt;TimeSeries&amp;lt;string&amp;gt;&lt;/code&gt;. Why not have a full set of functions for &lt;code&gt;TimeSeries&amp;lt;&#39;a&amp;gt;&lt;/code&gt; and then have two different types for the &lt;code&gt;TimeSeries&amp;lt;decimal&amp;gt;&lt;/code&gt; case and the &lt;code&gt;TimeSeries&amp;lt;string&amp;gt;&lt;/code&gt; case which only have a subset of the functions available?&amp;rdquo; Here is what I came up with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; System

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    DateTime &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DateTimeOffset
    Value &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeSeries&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Observation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DecimalSeries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSeries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnalysisResult&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Decimal &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; TimeSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private create t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;
        t
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;DateTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.toArray

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; private last &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts&lt;span style=&#34;color:#f92672&#34;&gt;.[-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;Value

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; inline &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; mean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TimeSeries&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        ts
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.averageBy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; DecimalSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; create t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DecimalSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            create t

        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ds &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DecimalSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            first ds &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.Decimal

        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ds &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DecimalSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            last ds &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.Decimal

        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mean &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ds &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; DecimalSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            mean ds &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.Decimal

    &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; StringSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; create t &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; StringSeries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            create t

        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ds &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; StringSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            first ds &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.String

        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ds &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; StringSeries&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            last ds &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; AnalysisResult.String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One thing to note, I had to add the keyword &lt;code&gt;inline&lt;/code&gt; to the &lt;code&gt;mean&lt;/code&gt; function in the &lt;code&gt;TimeSeries&lt;/code&gt; module. This makes the compiler figure out the types at the point the function is used. Now I am still not really proud of this code yet but it is accomplishing most of my goals. I am getting code reuse while being able to control which functions can be used by which type of &lt;code&gt;TimeSeries&lt;/code&gt;. Since I only define a &lt;code&gt;create&lt;/code&gt; function for the &lt;code&gt;DecimalSeries&lt;/code&gt; and &lt;code&gt;StringSeries&lt;/code&gt; types, I don&amp;rsquo;t have to fear someone creating a random &lt;code&gt;TimeSeries&amp;lt;&#39;a&amp;gt;&lt;/code&gt; if they follow the convention of using the &lt;code&gt;create&lt;/code&gt; function. The functions for &lt;code&gt;TimeSeries&lt;/code&gt; are also private and can only be called from the sub-modules &lt;code&gt;DecimalSeries&lt;/code&gt; and &lt;code&gt;StringSeries&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope my failures prove useful and an encouragement to others wandering through the process of learning Domain Driven Design. This was just one small problem that made me feel rather silly as I wrestled with it. Maybe I will come up with a more elegant solution but as of now, I like the code reuse and guarantees this is providing me. If you have a better solution, please message me on Twitter (@McCrews). When you get stuck coding, remember most of progress feels like wandering down dark halls until you come to the light. Keep calm and curry on!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The Divide Operator is a Lie</title>
<link>https://matthewcrews.com/blog/2018/2018-01-14-the-divide-operator-is-a-lie/</link>
<pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-01-14-the-divide-operator-is-a-lie/</guid>
<description>&lt;p&gt;One of the things that most attracted me to F# is the ability to accurately model your domain. What first turned me on to this was a talk by &lt;a href=&#34;https://www.youtube.com/watch?v=E8I19uA-wGY&amp;amp;t=1102s&#34;&gt;Scott Wlaschin on Functional programming design patterns&lt;/a&gt;. Scott has a more focused talk on &lt;a href=&#34;https://www.youtube.com/watch?v=Up7LcbGZFuo&amp;amp;t=229s&#34;&gt;Domain Modeling Made Functional&lt;/a&gt; that he did a few years later and a &lt;a href=&#34;https://fsharpforfunandprofit.com/books/&#34;&gt;book with the same title&lt;/a&gt;. This whole concept was blowing my mind. The idea of modeling your domain such that illegal states are unrepresentable sounds immensely satisfying to me.&lt;/p&gt;
&lt;p&gt;This new way of looking at the world has been slowly transforming all of my code. Everywhere I look now I am asking, &amp;ldquo;Is it possible for this state to be illegal? What can I do to ensure I am covering all scenarios?&amp;rdquo; With this new focus I quickly came across an operator in F# that lies, the division operator.&lt;/p&gt;
&lt;h2 id=&#34;the-divide-lie&#34;&gt;The Divide Lie&lt;/h2&gt;
&lt;p&gt;If you hover over the / operator in Visual Studio you will get the following function signature&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(/):&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T1 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T2 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;requires &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(/))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is nothing surprising here. The &lt;code&gt;/&lt;/code&gt; operator is expecting two values and will produce a third. Now let&amp;rsquo;s look at what the compiler says is supposed to happen when we divide two decimals. If I input the following lines into a fsx script in Visual Studio I will get the following types from the compiler.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10M     &lt;span style=&#34;color:#75715e&#34;&gt;// val a : decimal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5M      &lt;span style=&#34;color:#75715e&#34;&gt;// val b : decimal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b   &lt;span style=&#34;color:#75715e&#34;&gt;// val c : decimal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is where my problem is. The compiler says that taking two decimal values and dividing them will produce a third decimal value. This is not always the case though. If &lt;code&gt;b = 0M&lt;/code&gt; then this will throw an exception. This runs counter to the idea of making illegal states unrepresentable. We would rather that the operator returned &lt;code&gt;&#39;T option&lt;/code&gt; which would force us to deal with both scenarios.&lt;/p&gt;
&lt;h2 id=&#34;defining-a-new-operator&#34;&gt;Defining a new Operator&lt;/h2&gt;
&lt;p&gt;Fortunately for us, it is easy to add operators to F# but there are a couple of gotchas I will cover here. The F# Language Reference has a great page describing the rules around &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/operator-overloading&#34;&gt;Operator Overloading&lt;/a&gt;. The key thing to know is that there are a limited set of characters that are permitted: &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt;. &lt;code&gt;~&lt;/code&gt; is a special character to be used when making a unary operator. In this case, I need a binary operator so I will avoid using it.&lt;/p&gt;
&lt;p&gt;I want to create a new divide operator that will check if the divisor is &lt;code&gt;0&lt;/code&gt;. If the divisor is equivalent to &lt;code&gt;0&lt;/code&gt;, I want the operator to return &lt;code&gt;None&lt;/code&gt;. Since I want this to be intuitive when looking at the operator I will combine the divide symbol, &lt;code&gt;/&lt;/code&gt;, with the bang symbol, &lt;code&gt;!&lt;/code&gt;, to make my new operator &lt;code&gt;/!&lt;/code&gt;. The reason I am using the &lt;code&gt;!&lt;/code&gt; symbol is because it often indicates a warning which is what I am wanting to communicate to the developer. This means my function signature needs to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(/!):&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T1 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T2 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;T3 option &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;requires &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(/))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My first attempt looked like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(/!)&lt;/span&gt; a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; 0 &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Some
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I look at the function signature of my operator though I see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(/!):&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;int &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;int &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int option
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is no good. This will only work with inputs of &lt;code&gt;int&lt;/code&gt; and I am wanting something that is generic. The problem is in two places. The first, and more obvious one, is that I am comparing the value of &lt;code&gt;b&lt;/code&gt; with the value of &lt;code&gt;0&lt;/code&gt; which is an &lt;code&gt;int&lt;/code&gt;. The F# compiler is therefore restricting the input types to be &lt;code&gt;int&lt;/code&gt;. I know this because I can change the value &lt;code&gt;b&lt;/code&gt; is compared to and change the function signature. For example if I change &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0M&lt;/code&gt;, the type of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is restricted to &lt;code&gt;decimal&lt;/code&gt;. If I change &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0.&lt;/code&gt;, making it a float, the type of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is restricted to &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;making-the-operator-generic&#34;&gt;Making the Operator Generic&lt;/h2&gt;
&lt;p&gt;Fortunately, F# has a fix for this, it is called &lt;code&gt;GenericZero&lt;/code&gt;. &lt;code&gt;GenericZero&lt;/code&gt; is a type function which returns the &lt;code&gt;0&lt;/code&gt; equivalent for any numeric type or type with a static member called &lt;code&gt;Zero&lt;/code&gt;. It is contained in the F# Language Primitives, &lt;code&gt;Microsoft.FSharp.Core.LanguagePrimitives&lt;/code&gt;. More information can be found in the &lt;a href=&#34;https://msdn.microsoft.com/visualfsharpdocs/conceptual/languageprimitives.genericzero%5b%5et%5d-type-function-%5bfsharp%5d&#34;&gt;language reference entry on GenericZero&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other problem with this function is that it needs to be an &lt;code&gt;inline&lt;/code&gt; function. The &lt;code&gt;inline&lt;/code&gt; keyword in F# tells the compiler to figure out the types for the function at the place of usage instead of restricting the types. Here is a simple example of an &lt;code&gt;add&lt;/code&gt; function without the &lt;code&gt;inline&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// non-inlined function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#75715e&#34;&gt;// val add : a:int -&amp;gt; b:int -&amp;gt; int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You would think that the &lt;code&gt;add&lt;/code&gt; function would be generic but the F# compiler will restrict this to &lt;code&gt;int&lt;/code&gt; because that is the best match it can deduce from the context. Now, if we use the &lt;code&gt;add&lt;/code&gt; function with &lt;code&gt;float&lt;/code&gt; values it will change the function signature but it will still be restricted to only a single type. Here I show using the &lt;code&gt;add&lt;/code&gt; function with &lt;code&gt;float&lt;/code&gt; values before trying to use it with &lt;code&gt;int&lt;/code&gt; values. F# updates the function signature to using &lt;code&gt;float&lt;/code&gt; but now throws an error when we try to use &lt;code&gt;int&lt;/code&gt; values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// non-inlined function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#75715e&#34;&gt;// val add : a:float -&amp;gt; b:float -&amp;gt; float
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// r : float
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add 1 2 &lt;span style=&#34;color:#75715e&#34;&gt;// compiler error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;inline&lt;/code&gt; keyword can be added to the beginning of the function to have the compiler deduce the types at the point the function is used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; inline add a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#75715e&#34;&gt;// val add : a:&amp;#39;a -&amp;gt; b:&amp;#39;b -&amp;gt; &amp;#39;c (requires member(+))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// r : float
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add 1 2  &lt;span style=&#34;color:#75715e&#34;&gt;// r2 : int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have all of the ingredients we need to update our new operator &lt;code&gt;/!&lt;/code&gt; so that it will work with generic types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Microsoft.FSharp.Core.LanguagePrimitives

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; inline &lt;span style=&#34;color:#f92672&#34;&gt;(/!)&lt;/span&gt; a b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; GenericZero &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Some
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None
&lt;span style=&#34;color:#75715e&#34;&gt;// val (/!) : a:&amp;#39;a -&amp;gt; b:&amp;#39;b -&amp;gt; &amp;#39;c option (requires member (/) and member get_Zero and equality)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is exactly what we were looking for in the beginning. Now when we use our new operator we are forced to deal with a situation where the divisor is possibly &lt;code&gt;0&lt;/code&gt;. This solution for dealing with a possible &lt;code&gt;0&lt;/code&gt; divisor may not be for everyone. Perhaps having to deal with the &lt;code&gt;None&lt;/code&gt; scenario is too cumbersome for you. I find that I like having this additional safety in place because it forces me to write more robust code.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>My Most Expensive error</title>
<link>https://matthewcrews.com/blog/2018/2018-01-06-my-most-expensive-error/</link>
<pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-01-06-my-most-expensive-error/</guid>
<description>&lt;p&gt;The title for this may be a little over the top but it is not far from the truth. I am wanting to show how Units of Measure in F# can protect against some of the most insidious types of errors, mismatched units.&lt;/p&gt;
&lt;p&gt;One of the most difficult parts of putting together algorithms has been making sure that the Units of Measure for numbers match. For example, you should not be able to add lbs and cm, it doesn&amp;rsquo;t make sense. In most programming languages though, a number is just a number. You may be working with a strict language which requires you to convert from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt; before multiplying, but many will do this implicitly.&lt;/p&gt;
&lt;p&gt;When I am writing in R, Python, or C# I don&amp;rsquo;t have any kind of Units of Measure checking. This has led to a lot of frustrating debugging in the past where I missed some simple multiplication or division in my code. These types of bugs can be really nefarious because you can often get numbers which seem sensible at first but then blow up when outlier data is introduced.&lt;/p&gt;
&lt;h2 id=&#34;the-initial-error&#34;&gt;The Initial Error&lt;/h2&gt;
&lt;p&gt;I was tasked with writing a simple fee calculation for our products on Amazon. We need to know the impact of the new fees on our costing before they go into effect. This is such a simple thing. On my first pass I decided to just throw something together in Python. When I did this, I made a very expensive mistake. Can you see it?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_item_fba_fee&lt;/span&gt;(cost_config, item):
    weight_tiers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cost_config[item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_size&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WeightTiers&amp;#39;&lt;/span&gt;]
    weight_tier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [tier &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tier &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; weight_tiers &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;
                   (tier[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MinWeight&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_weight&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (tier[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MaxWeight&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_weight&amp;#39;&lt;/span&gt;])][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    fee &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weight_tier[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BaseFee&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item_weight&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; weight_tier[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight_fee_lb_cutoff&amp;#39;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is taking a &lt;code&gt;Dictionary&lt;/code&gt;, &lt;code&gt;cost_config&lt;/code&gt;, which holds some configuration values and a row of a Pandas &lt;code&gt;DataFrame&lt;/code&gt;, called &lt;code&gt;item&lt;/code&gt;. The first line of the function looks up the weight tiers which may apply to the &lt;code&gt;item&lt;/code&gt;. It then searches through the tiers to find the &lt;code&gt;weight_tier&lt;/code&gt; which matches the weight of the &lt;code&gt;item&lt;/code&gt;. It then calculates the fee, which is where the error is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fee&lt;/code&gt; value is composed of a &lt;code&gt;base_fee&lt;/code&gt;, in US Dollars (USD), and a USD/lb fee if the weight is above the &lt;code&gt;weight_fee_lb_cutoff&lt;/code&gt; value. In this case the &lt;code&gt;weight_fee_lb_cutoff&lt;/code&gt; value is 2.0 lbs. So, for every lb over 2.0, the item is charged an additional fee per lb.&lt;/p&gt;
&lt;p&gt;You may see the error now, I never multiply the overage weight by the &lt;code&gt;[USD/lb]&lt;/code&gt;, (US Dollars / pound), fee rate. If you look at the units of the fee calculation I am adding the &lt;code&gt;base_fee&lt;/code&gt;, which is in &lt;code&gt;[USD]&lt;/code&gt;, to &lt;code&gt;[lbs]&lt;/code&gt;. That does not make any sense. You can&amp;rsquo;t add different types of units, but most languages will let you do this all day. This was insidious because for most of our items, the fee was right. Only in cases where the item was over 2.0 &lt;code&gt;[lbs]&lt;/code&gt; did we get an incorrect fee.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be honest, I didn&amp;rsquo;t actually catch this bug. I put this code in production but I never felt really good about it. I couldn&amp;rsquo;t explain it but there was disquiet in my soul. I was already starting to rewrite parts of our system in F# so I decided that I would rewrite this little piece while it was fresh in my mind.&lt;/p&gt;
&lt;h2 id=&#34;f-units-of-measure-save-the-day&#34;&gt;F# Units of Measure Save the Day&lt;/h2&gt;
&lt;p&gt;For the last several years I have been moving toward more and more strict programming languages. When I heard that F# allows you to put Units of Measure on your numbers, I fell in love. I have longed for such a feature. So many errors can be eliminated when dealing with numbers if you can track and enforce units alignment in numbers.&lt;/p&gt;
&lt;p&gt;Because my soul never settled with my initial Python solution, I decided to rewrite the fee calculation. When I started I immediately declared the Units of Measure that I would need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Units of Measure Types
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;USD&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;(* US Dollar *)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&amp;lt;&lt;/span&gt;Measure&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lb&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;(* Imperial pound *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then wrote my fee calculation with the Units of Measure on the numbers to ensure everything matched. I then immediately saw the mistake. You will notice in this new function that I do multiply by the &lt;code&gt;feeRate&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// New fee function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; calculateWeightFee &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;baseFee &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weightFeeCutoff &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;lb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;feeRate &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;USD&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;lb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    baseFee &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;max 0M&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;lb&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; weightFeeCutoff&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; feeRate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I felt pretty stupid after such an obvious mistake. Fortunately, the previous version of the code was only in production for a couple of days. Had this gone on for longer, we could have missed huge volumes of opportunity because products would have look too expensive due to the new fee.&lt;/p&gt;
&lt;p&gt;Now granted, better unit testing would have caught this. Also, this post is not meant to disparage Python, or any other language, in any way. Rather, I am highlighting that F# is eliminating an entire class of errors for me and making me more productive. I much prefer the compiler barking at me about my units not matching than me spending hours or days hunting for where I missed a multiplication or a division. It feels great knowing that my units line up and that if I miss a small detail like this, the compiler will gently guide me back to sanity. Check out this wonderful &lt;a href=&#34;https://fsharpforfunandprofit.com/posts/units-of-measure/&#34;&gt;post by Scott Wlaschin&lt;/a&gt; for a more detailed discussion on what can be done with F# and Units of Measure.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Using F# to Parse HTML</title>
<link>https://matthewcrews.com/blog/2018/2018-01-05-using-fsharp-to-parse-html/</link>
<pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://matthewcrews.com/blog/2018/2018-01-05-using-fsharp-to-parse-html/</guid>
<description>&lt;p&gt;At work I have been tasked with extracting the product description information for several of our products to be used as an import for an external system. Normally I would just write a query for the database to get all of this information but in this case I do not have access to the database directly. Even if I did have it, I am not familiar with the schema so I would rather not have to spend the effort digging into if I do not have to. I have been putting off this project since it was not high priority but recently I came across an excellent talk by &lt;a href=&#34;https://www.youtube.com/watch?v=K_AlkvZsUus&amp;amp;t=1219s&#34;&gt;Evelina Gabasova at NDC Oslo&lt;/a&gt; where she showed the use of TypeProviders to connect to IMDB to extract data on cast members of Star Wars. As I watched this I had a eureka moment, &amp;ldquo;Why not just use F# to pull the data directly from the website instead of dealing with the SQL Schema?&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;initial-attempt-with-htmlprovider&#34;&gt;Initial Attempt with HtmlProvider&lt;/h1&gt;
&lt;p&gt;Now, this may seem a little silly but for my case it has some advantages. I do not have to bother with getting permissions for the database running the company e-commerce website and it allows me to use some F#. I quickly fire up a new F# project in VS Code and stub out the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;I &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./packages&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FSharp.Data/lib/net40/FSharp.Data.dll&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; FSharp.Data

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HtmlProvider&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.b-glowing.com/skincare/cleansers/paulas-choice-calm-redness-relief-cleanser-for-oily-skin/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Product.GetSample()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is when I run into a problem. In the talk that &lt;a href=&#34;http://evelinag.com/&#34;&gt;Evelina Gabasova&lt;/a&gt; gave the data on IMDB was in a nice table. This meant that the TypeProvider could detect it automatically and provide it as a nice property of the &lt;code&gt;test&lt;/code&gt; object in the above example. My problem is that the data I need is in the Description area of the page, specifically the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; with the attribute &lt;code&gt;itemprop=&amp;quot;description&amp;quot;&lt;/code&gt;. I am trying to turn this information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemprop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;WHAT IT IS&amp;amp;nbsp;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;
		A lightweight silky gel cleanser for Normal to Oily skin types that gently removes makeup and soothes red, sensitive skin.
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;BENEFITS FOR YOU&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;• Safe for even the most sensitive skin.
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;• Removes excess oil and makeup.
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;• Soothes and refreshes senstive, irritated&amp;amp;nbsp;skin.
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;YOU’LL EXPERIENCE&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;This lightweight gel texture lathers beautifully to remove excess oils, impurities and makeup. Skin is left calm, clean and soft.
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;WHY IT’S GLOWING&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;
		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;
		The calming cleanser works wonders for those of us who&amp;amp;nbsp;experience sensitivity and redness without drying or stripping skin. The formula increases our skins natural barrier so overtime skin is less sensitive and red on its own.&amp;amp;nbsp;
	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;into something like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tag&lt;/th&gt;
&lt;th&gt;Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WHAT IT IS&lt;/td&gt;
&lt;td&gt;A lightweight silky gel cleanser for Normal to Oily skin types that gently removes makeup and soothes red, sensitive skin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BENEFITS FOR YOU&lt;/td&gt;
&lt;td&gt;Safe for even the most sensitive skin. Removes excess oil and makeup. Soothes and refreshes sensitive, irritated skin.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This means that I need a different approach. Thankfully, F# delivered.&lt;/p&gt;
&lt;h1 id=&#34;using-html-parser&#34;&gt;Using HTML Parser&lt;/h1&gt;
&lt;p&gt;If the &lt;code&gt;HtmlProvider&lt;/code&gt; does not give you what you need for HTML parsing then &lt;code&gt;FSharp.Data&lt;/code&gt; also has a handy &lt;a href=&#34;http://fsharp.github.io/FSharp.Data/library/HtmlParser.html&#34;&gt;HTML Parser&lt;/a&gt; which includes some excellent documentation and examples. I put together a new script to extract the data from the website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;I &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./packages&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FSharp.Data/lib/net40/FSharp.Data.dll&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; FSharp.Data

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; productHtml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HtmlDocument.Load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.b-glowing.com/skincare/cleansers/paulas-choice-calm-redness-relief-cleanser-for-oily-skin/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; getDescription &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;HtmlDocument&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Descendants &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.filter &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TryGetAttribute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemprop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Some att &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; att&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Value() &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.exactlyOne
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 
        x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Descendants &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.map &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
                t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Descendants &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strong&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
                &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.exactlyOne 
                &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;InnerText()&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;InnerText()&lt;span style=&#34;color:#f92672&#34;&gt;.[(&lt;/span&gt;tag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Length&lt;span style=&#34;color:#f92672&#34;&gt;)..(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;InnerText()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;
            tag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; text
        &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; productDescription &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getDescription productHtml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lines 1 through 5 are just getting the HTML for the product listing. The &lt;code&gt;getDescription&lt;/code&gt; function is what actually breaks down the HTML to return a tuple with the information that I am interested in. What I like most about this is that I did not have to use &lt;code&gt;XPath&lt;/code&gt; or some other &lt;code&gt;XML&lt;/code&gt; querying tool. While &lt;code&gt;XPath&lt;/code&gt; may be powerful, I find I I have difficulty achieving what I really want. I find the F# approach shown here much more straightforward.&lt;/p&gt;
&lt;p&gt;In line 8 the function is extracting every node in the HTML which is a &lt;code&gt;span&lt;/code&gt;. This will obviously return spans that we are not interested in which is why we need to filter the result using &lt;code&gt;Seq.filter&lt;/code&gt;. Since I know that the span I am interested in has the attribute &lt;code&gt;itemprop=&amp;quot;description&amp;quot;&lt;/code&gt;, I use a function to return &lt;code&gt;false&lt;/code&gt; when that attribute is not present and &lt;code&gt;true&lt;/code&gt; when it is present. Line 10 highlights one of my favorite features of F# which is the returning of an &lt;code&gt;Option&lt;/code&gt; type. The function &lt;code&gt;TryGetAttribute&lt;/code&gt; will either successfully return the attribute which is a type of &lt;code&gt;Some &#39;T&lt;/code&gt; or it returns &lt;code&gt;None&lt;/code&gt;. In the case of &lt;code&gt;None&lt;/code&gt; I simply have the function return &lt;code&gt;false&lt;/code&gt;. If the attribute does exist I then test if it is equal to &amp;ldquo;description&amp;rdquo; on line 14. If it does match, the function returns &lt;code&gt;true&lt;/code&gt;. In all other cases the function returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since I know how the HTML is rendered on these pages, I know that there will only ever be one of these &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements in the HTML so I use the function &lt;code&gt;Seq.exactlyOne&lt;/code&gt; to select a single element from the sequence. Line 18 to 27 is where I actually pull out the information that I want. I have an odd problem in that the text in the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; element is what I want the tag name to be for the output table and the rest of the text in the parent &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element is to be the text data. To do this I first extract the text in the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; element on lines 21 through 24. I then extract all of the text from the parent &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, which includes the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; text, and then select a substring which excludes the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; text on line 22. I then return a tuple of the tag name and the associated text.&lt;/p&gt;
&lt;p&gt;While I am sure this is not the most elegant way to go about this, it was incredibly simple compared to some previous efforts I have had trying to get &lt;code&gt;XPath&lt;/code&gt; to work on other projects. I find the F# syntax and approach much more straightforward and easier to understand. Is there a better way for me to have done this? Could the code be more idiomatic? All comments and suggestions are appreciated.&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>